
stk500boot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000566  00800200  0003ef8a  0000101e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f8a  0003e000  0003e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bc  00800766  00800766  00001584  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000015d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020e5  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f66  00000000  00000000  000037ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001072  00000000  00000000  00004713  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00005788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008fc  00000000  00000000  000059d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d52  00000000  00000000  000062cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000801e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0003e000 <__vectors>:
   3e000:	0d 94 72 f0 	jmp	0x3e0e4	; 0x3e0e4 <__ctors_end>
   3e004:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e008:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e00c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e010:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e014:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e018:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e01c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e020:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e024:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e028:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e02c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e030:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e034:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e038:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e03c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e040:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e044:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e048:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e04c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e050:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e054:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e058:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e05c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e060:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e064:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e068:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e06c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e070:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e074:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e078:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e07c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e080:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e084:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e088:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e08c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e090:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e094:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e098:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e09c:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0a0:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0a4:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0a8:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0ac:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0b0:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0b4:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0b8:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0bc:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0c0:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0c4:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0c8:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0cc:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0d0:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0d4:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0d8:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0dc:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>
   3e0e0:	0d 94 9b f0 	jmp	0x3e136	; 0x3e136 <__bad_interrupt>

0003e0e4 <__ctors_end>:
   3e0e4:	11 24       	eor	r1, r1
   3e0e6:	1f be       	out	0x3f, r1	; 63
   3e0e8:	cf ef       	ldi	r28, 0xFF	; 255
   3e0ea:	d1 e2       	ldi	r29, 0x21	; 33
   3e0ec:	de bf       	out	0x3e, r29	; 62
   3e0ee:	cd bf       	out	0x3d, r28	; 61
   3e0f0:	01 e0       	ldi	r16, 0x01	; 1
   3e0f2:	0c bf       	out	0x3c, r16	; 60

0003e0f4 <__do_copy_data>:
   3e0f4:	17 e0       	ldi	r17, 0x07	; 7
   3e0f6:	a0 e0       	ldi	r26, 0x00	; 0
   3e0f8:	b2 e0       	ldi	r27, 0x02	; 2
   3e0fa:	ea e8       	ldi	r30, 0x8A	; 138
   3e0fc:	ff ee       	ldi	r31, 0xEF	; 239
   3e0fe:	03 e0       	ldi	r16, 0x03	; 3
   3e100:	0b bf       	out	0x3b, r16	; 59
   3e102:	02 c0       	rjmp	.+4      	; 0x3e108 <__do_copy_data+0x14>
   3e104:	07 90       	elpm	r0, Z+
   3e106:	0d 92       	st	X+, r0
   3e108:	a6 36       	cpi	r26, 0x66	; 102
   3e10a:	b1 07       	cpc	r27, r17
   3e10c:	d9 f7       	brne	.-10     	; 0x3e104 <__do_copy_data+0x10>

0003e10e <__do_clear_bss>:
   3e10e:	28 e0       	ldi	r18, 0x08	; 8
   3e110:	a6 e6       	ldi	r26, 0x66	; 102
   3e112:	b7 e0       	ldi	r27, 0x07	; 7
   3e114:	01 c0       	rjmp	.+2      	; 0x3e118 <.do_clear_bss_start>

0003e116 <.do_clear_bss_loop>:
   3e116:	1d 92       	st	X+, r1

0003e118 <.do_clear_bss_start>:
   3e118:	a2 32       	cpi	r26, 0x22	; 34
   3e11a:	b2 07       	cpc	r27, r18
   3e11c:	e1 f7       	brne	.-8      	; 0x3e116 <.do_clear_bss_loop>
   3e11e:	0f 94 71 f3 	call	0x3e6e2	; 0x3e6e2 <main>
   3e122:	0d 94 c3 f7 	jmp	0x3ef86	; 0x3ef86 <_exit>

0003e126 <__jumpMain>:

	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );

//*	set stack pointer to top of RAM

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
   3e126:	01 e2       	ldi	r16, 0x21	; 33
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3e128:	0e bf       	out	0x3e, r16	; 62

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3e12a:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3e12c:	0d bf       	out	0x3d, r16	; 61

	asm volatile ( "clr __zero_reg__" );									// GCC depends on register r1 set to 0
   3e12e:	11 24       	eor	r1, r1
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );	// set SREG to 0
   3e130:	1f be       	out	0x3f, r1	; 63
	asm volatile ( "jmp main");												// jump to main()
   3e132:	0d 94 71 f3 	jmp	0x3e6e2	; 0x3e6e2 <main>

0003e136 <__bad_interrupt>:
   3e136:	0d 94 00 f0 	jmp	0x3e000	; 0x3e000 <__vectors>

0003e13a <XorWithIv>:
{
   3e13a:	e0 91 68 07 	lds	r30, 0x0768	; 0x800768 <Iv>
   3e13e:	f0 91 69 07 	lds	r31, 0x0769	; 0x800769 <Iv+0x1>
   3e142:	ac 01       	movw	r20, r24
   3e144:	40 5f       	subi	r20, 0xF0	; 240
   3e146:	5f 4f       	sbci	r21, 0xFF	; 255
    buf[i] ^= Iv[i];
   3e148:	dc 01       	movw	r26, r24
   3e14a:	2d 91       	ld	r18, X+
   3e14c:	cd 01       	movw	r24, r26
   3e14e:	31 91       	ld	r19, Z+
   3e150:	11 97       	sbiw	r26, 0x01	; 1
   3e152:	23 27       	eor	r18, r19
   3e154:	2c 93       	st	X, r18
  for(i = 0; i < 16; ++i)
   3e156:	84 17       	cp	r24, r20
   3e158:	95 07       	cpc	r25, r21
   3e15a:	b1 f7       	brne	.-20     	; 0x3e148 <XorWithIv+0xe>
}
   3e15c:	08 95       	ret

0003e15e <KeyExpansion>:
{
   3e15e:	8f 92       	push	r8
   3e160:	9f 92       	push	r9
   3e162:	af 92       	push	r10
   3e164:	bf 92       	push	r11
   3e166:	ff 92       	push	r15
   3e168:	0f 93       	push	r16
   3e16a:	1f 93       	push	r17
   3e16c:	cf 93       	push	r28
   3e16e:	df 93       	push	r29
   3e170:	00 d0       	rcall	.+0      	; 0x3e172 <KeyExpansion+0x14>
   3e172:	1f 92       	push	r1
   3e174:	cd b7       	in	r28, 0x3d	; 61
   3e176:	de b7       	in	r29, 0x3e	; 62
   3e178:	60 91 6a 07 	lds	r22, 0x076A	; 0x80076a <Key>
   3e17c:	70 91 6b 07 	lds	r23, 0x076B	; 0x80076b <Key+0x1>
   3e180:	ec e6       	ldi	r30, 0x6C	; 108
   3e182:	f7 e0       	ldi	r31, 0x07	; 7
   3e184:	9b 01       	movw	r18, r22
   3e186:	20 5f       	subi	r18, 0xF0	; 240
   3e188:	3f 4f       	sbci	r19, 0xFF	; 255
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
   3e18a:	cf 01       	movw	r24, r30
   3e18c:	db 01       	movw	r26, r22
   3e18e:	4c 91       	ld	r20, X
   3e190:	dc 01       	movw	r26, r24
   3e192:	4c 93       	st	X, r20
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
   3e194:	db 01       	movw	r26, r22
   3e196:	11 96       	adiw	r26, 0x01	; 1
   3e198:	4c 91       	ld	r20, X
   3e19a:	dc 01       	movw	r26, r24
   3e19c:	11 96       	adiw	r26, 0x01	; 1
   3e19e:	4c 93       	st	X, r20
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
   3e1a0:	db 01       	movw	r26, r22
   3e1a2:	12 96       	adiw	r26, 0x02	; 2
   3e1a4:	4c 91       	ld	r20, X
   3e1a6:	dc 01       	movw	r26, r24
   3e1a8:	12 96       	adiw	r26, 0x02	; 2
   3e1aa:	4c 93       	st	X, r20
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
   3e1ac:	db 01       	movw	r26, r22
   3e1ae:	13 96       	adiw	r26, 0x03	; 3
   3e1b0:	4c 91       	ld	r20, X
   3e1b2:	dc 01       	movw	r26, r24
   3e1b4:	13 96       	adiw	r26, 0x03	; 3
   3e1b6:	4c 93       	st	X, r20
   3e1b8:	6c 5f       	subi	r22, 0xFC	; 252
   3e1ba:	7f 4f       	sbci	r23, 0xFF	; 255
   3e1bc:	04 96       	adiw	r24, 0x04	; 4
  for(i = 0; i < Nk; ++i)
   3e1be:	62 17       	cp	r22, r18
   3e1c0:	73 07       	cpc	r23, r19
   3e1c2:	21 f7       	brne	.-56     	; 0x3e18c <KeyExpansion+0x2e>
   3e1c4:	94 e0       	ldi	r25, 0x04	; 4
   3e1c6:	89 2e       	mov	r8, r25
   3e1c8:	91 2c       	mov	r9, r1
   3e1ca:	a1 2c       	mov	r10, r1
   3e1cc:	b1 2c       	mov	r11, r1
   3e1ce:	be 01       	movw	r22, r28
   3e1d0:	6b 5f       	subi	r22, 0xFB	; 251
   3e1d2:	7f 4f       	sbci	r23, 0xFF	; 255
   3e1d4:	af 01       	movw	r20, r30
   3e1d6:	44 5f       	subi	r20, 0xF4	; 244
   3e1d8:	5f 4f       	sbci	r21, 0xFF	; 255
   3e1da:	9e 01       	movw	r18, r28
   3e1dc:	2f 5f       	subi	r18, 0xFF	; 255
   3e1de:	3f 4f       	sbci	r19, 0xFF	; 255
      tempa[j]=RoundKey[(i-1) * 4 + j];
   3e1e0:	da 01       	movw	r26, r20
   3e1e2:	1d 91       	ld	r17, X+
   3e1e4:	ad 01       	movw	r20, r26
   3e1e6:	d9 01       	movw	r26, r18
   3e1e8:	1d 93       	st	X+, r17
   3e1ea:	9d 01       	movw	r18, r26
    for(j = 0; j < 4; ++j)
   3e1ec:	6a 17       	cp	r22, r26
   3e1ee:	7b 07       	cpc	r23, r27
   3e1f0:	b9 f7       	brne	.-18     	; 0x3e1e0 <KeyExpansion+0x82>
    if (i % Nk == 0)
   3e1f2:	95 01       	movw	r18, r10
   3e1f4:	84 01       	movw	r16, r8
   3e1f6:	03 70       	andi	r16, 0x03	; 3
   3e1f8:	11 27       	eor	r17, r17
   3e1fa:	22 27       	eor	r18, r18
   3e1fc:	33 27       	eor	r19, r19
   3e1fe:	01 2b       	or	r16, r17
   3e200:	02 2b       	or	r16, r18
   3e202:	03 2b       	or	r16, r19
   3e204:	51 f5       	brne	.+84     	; 0x3e25a <KeyExpansion+0xfc>
   3e206:	29 81       	ldd	r18, Y+1	; 0x01
   3e208:	4c 81       	ldd	r20, Y+4	; 0x04
  return sbox[num];
   3e20a:	0a 81       	ldd	r16, Y+2	; 0x02
   3e20c:	10 e0       	ldi	r17, 0x00	; 0
   3e20e:	0a 5b       	subi	r16, 0xBA	; 186
   3e210:	19 4f       	sbci	r17, 0xF9	; 249
   3e212:	d8 01       	movw	r26, r16
   3e214:	fc 90       	ld	r15, X
   3e216:	0b 81       	ldd	r16, Y+3	; 0x03
   3e218:	10 e0       	ldi	r17, 0x00	; 0
   3e21a:	0a 5b       	subi	r16, 0xBA	; 186
   3e21c:	19 4f       	sbci	r17, 0xF9	; 249
        tempa[1] = getSBoxValue(tempa[1]);
   3e21e:	d8 01       	movw	r26, r16
   3e220:	3c 91       	ld	r19, X
   3e222:	3a 83       	std	Y+2, r19	; 0x02
  return sbox[num];
   3e224:	50 e0       	ldi	r21, 0x00	; 0
   3e226:	4a 5b       	subi	r20, 0xBA	; 186
   3e228:	59 4f       	sbci	r21, 0xF9	; 249
        tempa[2] = getSBoxValue(tempa[2]);
   3e22a:	da 01       	movw	r26, r20
   3e22c:	3c 91       	ld	r19, X
   3e22e:	3b 83       	std	Y+3, r19	; 0x03
  return sbox[num];
   3e230:	30 e0       	ldi	r19, 0x00	; 0
   3e232:	2a 5b       	subi	r18, 0xBA	; 186
   3e234:	39 4f       	sbci	r19, 0xF9	; 249
        tempa[3] = getSBoxValue(tempa[3]);
   3e236:	d9 01       	movw	r26, r18
   3e238:	2c 91       	ld	r18, X
   3e23a:	2c 83       	std	Y+4, r18	; 0x04
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
   3e23c:	95 01       	movw	r18, r10
   3e23e:	84 01       	movw	r16, r8
   3e240:	82 e0       	ldi	r24, 0x02	; 2
   3e242:	36 95       	lsr	r19
   3e244:	27 95       	ror	r18
   3e246:	17 95       	ror	r17
   3e248:	07 95       	ror	r16
   3e24a:	8a 95       	dec	r24
   3e24c:	d1 f7       	brne	.-12     	; 0x3e242 <KeyExpansion+0xe4>
   3e24e:	09 5b       	subi	r16, 0xB9	; 185
   3e250:	1b 4f       	sbci	r17, 0xFB	; 251
   3e252:	d8 01       	movw	r26, r16
   3e254:	2c 91       	ld	r18, X
   3e256:	2f 25       	eor	r18, r15
   3e258:	29 83       	std	Y+1, r18	; 0x01
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
   3e25a:	20 81       	ld	r18, Z
   3e25c:	39 81       	ldd	r19, Y+1	; 0x01
   3e25e:	23 27       	eor	r18, r19
   3e260:	20 8b       	std	Z+16, r18	; 0x10
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
   3e262:	21 81       	ldd	r18, Z+1	; 0x01
   3e264:	3a 81       	ldd	r19, Y+2	; 0x02
   3e266:	23 27       	eor	r18, r19
   3e268:	21 8b       	std	Z+17, r18	; 0x11
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
   3e26a:	22 81       	ldd	r18, Z+2	; 0x02
   3e26c:	3b 81       	ldd	r19, Y+3	; 0x03
   3e26e:	23 27       	eor	r18, r19
   3e270:	22 8b       	std	Z+18, r18	; 0x12
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
   3e272:	23 81       	ldd	r18, Z+3	; 0x03
   3e274:	3c 81       	ldd	r19, Y+4	; 0x04
   3e276:	23 27       	eor	r18, r19
   3e278:	23 8b       	std	Z+19, r18	; 0x13
  for(; (i < (Nb * (Nr + 1))); ++i)
   3e27a:	bf ef       	ldi	r27, 0xFF	; 255
   3e27c:	8b 1a       	sub	r8, r27
   3e27e:	9b 0a       	sbc	r9, r27
   3e280:	ab 0a       	sbc	r10, r27
   3e282:	bb 0a       	sbc	r11, r27
   3e284:	34 96       	adiw	r30, 0x04	; 4
   3e286:	8c e2       	ldi	r24, 0x2C	; 44
   3e288:	88 16       	cp	r8, r24
   3e28a:	91 04       	cpc	r9, r1
   3e28c:	a1 04       	cpc	r10, r1
   3e28e:	b1 04       	cpc	r11, r1
   3e290:	09 f0       	breq	.+2      	; 0x3e294 <KeyExpansion+0x136>
   3e292:	a0 cf       	rjmp	.-192    	; 0x3e1d4 <KeyExpansion+0x76>
}
   3e294:	0f 90       	pop	r0
   3e296:	0f 90       	pop	r0
   3e298:	0f 90       	pop	r0
   3e29a:	0f 90       	pop	r0
   3e29c:	df 91       	pop	r29
   3e29e:	cf 91       	pop	r28
   3e2a0:	1f 91       	pop	r17
   3e2a2:	0f 91       	pop	r16
   3e2a4:	ff 90       	pop	r15
   3e2a6:	bf 90       	pop	r11
   3e2a8:	af 90       	pop	r10
   3e2aa:	9f 90       	pop	r9
   3e2ac:	8f 90       	pop	r8
   3e2ae:	08 95       	ret

0003e2b0 <AddRoundKey>:
{
   3e2b0:	1f 93       	push	r17
   3e2b2:	cf 93       	push	r28
   3e2b4:	df 93       	push	r29
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
   3e2b6:	60 91 1c 08 	lds	r22, 0x081C	; 0x80081c <state>
   3e2ba:	70 91 1d 08 	lds	r23, 0x081D	; 0x80081d <state+0x1>
   3e2be:	90 e1       	ldi	r25, 0x10	; 16
   3e2c0:	89 9f       	mul	r24, r25
   3e2c2:	a0 01       	movw	r20, r0
   3e2c4:	11 24       	eor	r1, r1
   3e2c6:	30 e0       	ldi	r19, 0x00	; 0
   3e2c8:	20 e0       	ldi	r18, 0x00	; 0
   3e2ca:	44 59       	subi	r20, 0x94	; 148
   3e2cc:	58 4f       	sbci	r21, 0xF8	; 248
   3e2ce:	fb 01       	movw	r30, r22
   3e2d0:	e2 0f       	add	r30, r18
   3e2d2:	f3 1f       	adc	r31, r19
   3e2d4:	da 01       	movw	r26, r20
   3e2d6:	a2 0f       	add	r26, r18
   3e2d8:	b3 1f       	adc	r27, r19
    for(j = 0; j < 4; ++j)
   3e2da:	90 e0       	ldi	r25, 0x00	; 0
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
   3e2dc:	81 91       	ld	r24, Z+
   3e2de:	1d 91       	ld	r17, X+
   3e2e0:	ef 01       	movw	r28, r30
   3e2e2:	21 97       	sbiw	r28, 0x01	; 1
   3e2e4:	81 27       	eor	r24, r17
   3e2e6:	88 83       	st	Y, r24
    for(j = 0; j < 4; ++j)
   3e2e8:	9f 5f       	subi	r25, 0xFF	; 255
   3e2ea:	94 30       	cpi	r25, 0x04	; 4
   3e2ec:	b9 f7       	brne	.-18     	; 0x3e2dc <AddRoundKey+0x2c>
   3e2ee:	2c 5f       	subi	r18, 0xFC	; 252
   3e2f0:	3f 4f       	sbci	r19, 0xFF	; 255
  for(i=0;i<4;++i)
   3e2f2:	20 31       	cpi	r18, 0x10	; 16
   3e2f4:	31 05       	cpc	r19, r1
   3e2f6:	59 f7       	brne	.-42     	; 0x3e2ce <AddRoundKey+0x1e>
}
   3e2f8:	df 91       	pop	r29
   3e2fa:	cf 91       	pop	r28
   3e2fc:	1f 91       	pop	r17
   3e2fe:	08 95       	ret

0003e300 <SubBytes>:
{
   3e300:	20 91 1c 08 	lds	r18, 0x081C	; 0x80081c <state>
   3e304:	30 91 1d 08 	lds	r19, 0x081D	; 0x80081d <state+0x1>
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
   3e308:	94 e0       	ldi	r25, 0x04	; 4
{
   3e30a:	d9 01       	movw	r26, r18
   3e30c:	84 e0       	ldi	r24, 0x04	; 4
  return sbox[num];
   3e30e:	ec 91       	ld	r30, X
   3e310:	f0 e0       	ldi	r31, 0x00	; 0
   3e312:	ea 5b       	subi	r30, 0xBA	; 186
   3e314:	f9 4f       	sbci	r31, 0xF9	; 249
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
   3e316:	40 81       	ld	r20, Z
   3e318:	4c 93       	st	X, r20
   3e31a:	81 50       	subi	r24, 0x01	; 1
   3e31c:	14 96       	adiw	r26, 0x04	; 4
    for(j = 0; j < 4; ++j)
   3e31e:	81 11       	cpse	r24, r1
   3e320:	f6 cf       	rjmp	.-20     	; 0x3e30e <SubBytes+0xe>
   3e322:	91 50       	subi	r25, 0x01	; 1
   3e324:	2f 5f       	subi	r18, 0xFF	; 255
   3e326:	3f 4f       	sbci	r19, 0xFF	; 255
  for(i = 0; i < 4; ++i)
   3e328:	91 11       	cpse	r25, r1
   3e32a:	ef cf       	rjmp	.-34     	; 0x3e30a <SubBytes+0xa>
}
   3e32c:	08 95       	ret

0003e32e <ShiftRows>:
  temp           = (*state)[0][1];
   3e32e:	e0 91 1c 08 	lds	r30, 0x081C	; 0x80081c <state>
   3e332:	f0 91 1d 08 	lds	r31, 0x081D	; 0x80081d <state+0x1>
   3e336:	81 81       	ldd	r24, Z+1	; 0x01
  (*state)[0][1] = (*state)[1][1];
   3e338:	95 81       	ldd	r25, Z+5	; 0x05
   3e33a:	91 83       	std	Z+1, r25	; 0x01
  (*state)[1][1] = (*state)[2][1];
   3e33c:	91 85       	ldd	r25, Z+9	; 0x09
   3e33e:	95 83       	std	Z+5, r25	; 0x05
  (*state)[2][1] = (*state)[3][1];
   3e340:	95 85       	ldd	r25, Z+13	; 0x0d
   3e342:	91 87       	std	Z+9, r25	; 0x09
  (*state)[3][1] = temp;
   3e344:	85 87       	std	Z+13, r24	; 0x0d
  temp           = (*state)[0][2];
   3e346:	82 81       	ldd	r24, Z+2	; 0x02
  (*state)[0][2] = (*state)[2][2];
   3e348:	92 85       	ldd	r25, Z+10	; 0x0a
   3e34a:	92 83       	std	Z+2, r25	; 0x02
  (*state)[2][2] = temp;
   3e34c:	82 87       	std	Z+10, r24	; 0x0a
  temp       = (*state)[1][2];
   3e34e:	86 81       	ldd	r24, Z+6	; 0x06
  (*state)[1][2] = (*state)[3][2];
   3e350:	96 85       	ldd	r25, Z+14	; 0x0e
   3e352:	96 83       	std	Z+6, r25	; 0x06
  (*state)[3][2] = temp;
   3e354:	86 87       	std	Z+14, r24	; 0x0e
  temp       = (*state)[0][3];
   3e356:	83 81       	ldd	r24, Z+3	; 0x03
  (*state)[0][3] = (*state)[3][3];
   3e358:	97 85       	ldd	r25, Z+15	; 0x0f
   3e35a:	93 83       	std	Z+3, r25	; 0x03
  (*state)[3][3] = (*state)[2][3];
   3e35c:	93 85       	ldd	r25, Z+11	; 0x0b
   3e35e:	97 87       	std	Z+15, r25	; 0x0f
  (*state)[2][3] = (*state)[1][3];
   3e360:	97 81       	ldd	r25, Z+7	; 0x07
   3e362:	93 87       	std	Z+11, r25	; 0x0b
  (*state)[1][3] = temp;
   3e364:	87 83       	std	Z+7, r24	; 0x07
}
   3e366:	08 95       	ret

0003e368 <xtime>:
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
   3e368:	98 2f       	mov	r25, r24
   3e36a:	99 1f       	adc	r25, r25
   3e36c:	99 27       	eor	r25, r25
   3e36e:	99 1f       	adc	r25, r25
   3e370:	2b e1       	ldi	r18, 0x1B	; 27
   3e372:	92 9f       	mul	r25, r18
   3e374:	90 2d       	mov	r25, r0
   3e376:	11 24       	eor	r1, r1
   3e378:	88 0f       	add	r24, r24
}
   3e37a:	89 27       	eor	r24, r25
   3e37c:	08 95       	ret

0003e37e <InvSubBytes>:
{
   3e37e:	20 91 1c 08 	lds	r18, 0x081C	; 0x80081c <state>
   3e382:	30 91 1d 08 	lds	r19, 0x081D	; 0x80081d <state+0x1>
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
   3e386:	94 e0       	ldi	r25, 0x04	; 4
{
   3e388:	d9 01       	movw	r26, r18
   3e38a:	84 e0       	ldi	r24, 0x04	; 4
  return rsbox[num];
   3e38c:	ec 91       	ld	r30, X
   3e38e:	f0 e0       	ldi	r31, 0x00	; 0
   3e390:	ea 5b       	subi	r30, 0xBA	; 186
   3e392:	fa 4f       	sbci	r31, 0xFA	; 250
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
   3e394:	40 81       	ld	r20, Z
   3e396:	4c 93       	st	X, r20
   3e398:	81 50       	subi	r24, 0x01	; 1
   3e39a:	14 96       	adiw	r26, 0x04	; 4
    for(j=0;j<4;++j)
   3e39c:	81 11       	cpse	r24, r1
   3e39e:	f6 cf       	rjmp	.-20     	; 0x3e38c <InvSubBytes+0xe>
   3e3a0:	91 50       	subi	r25, 0x01	; 1
   3e3a2:	2f 5f       	subi	r18, 0xFF	; 255
   3e3a4:	3f 4f       	sbci	r19, 0xFF	; 255
  for(i=0;i<4;++i)
   3e3a6:	91 11       	cpse	r25, r1
   3e3a8:	ef cf       	rjmp	.-34     	; 0x3e388 <InvSubBytes+0xa>
}
   3e3aa:	08 95       	ret

0003e3ac <InvShiftRows>:
  temp=(*state)[3][1];
   3e3ac:	e0 91 1c 08 	lds	r30, 0x081C	; 0x80081c <state>
   3e3b0:	f0 91 1d 08 	lds	r31, 0x081D	; 0x80081d <state+0x1>
   3e3b4:	85 85       	ldd	r24, Z+13	; 0x0d
  (*state)[3][1]=(*state)[2][1];
   3e3b6:	91 85       	ldd	r25, Z+9	; 0x09
   3e3b8:	95 87       	std	Z+13, r25	; 0x0d
  (*state)[2][1]=(*state)[1][1];
   3e3ba:	95 81       	ldd	r25, Z+5	; 0x05
   3e3bc:	91 87       	std	Z+9, r25	; 0x09
  (*state)[1][1]=(*state)[0][1];
   3e3be:	91 81       	ldd	r25, Z+1	; 0x01
   3e3c0:	95 83       	std	Z+5, r25	; 0x05
  (*state)[0][1]=temp;
   3e3c2:	81 83       	std	Z+1, r24	; 0x01
  temp=(*state)[0][2];
   3e3c4:	82 81       	ldd	r24, Z+2	; 0x02
  (*state)[0][2]=(*state)[2][2];
   3e3c6:	92 85       	ldd	r25, Z+10	; 0x0a
   3e3c8:	92 83       	std	Z+2, r25	; 0x02
  (*state)[2][2]=temp;
   3e3ca:	82 87       	std	Z+10, r24	; 0x0a
  temp=(*state)[1][2];
   3e3cc:	86 81       	ldd	r24, Z+6	; 0x06
  (*state)[1][2]=(*state)[3][2];
   3e3ce:	96 85       	ldd	r25, Z+14	; 0x0e
   3e3d0:	96 83       	std	Z+6, r25	; 0x06
  (*state)[3][2]=temp;
   3e3d2:	86 87       	std	Z+14, r24	; 0x0e
  temp=(*state)[0][3];
   3e3d4:	83 81       	ldd	r24, Z+3	; 0x03
  (*state)[0][3]=(*state)[1][3];
   3e3d6:	97 81       	ldd	r25, Z+7	; 0x07
   3e3d8:	93 83       	std	Z+3, r25	; 0x03
  (*state)[1][3]=(*state)[2][3];
   3e3da:	93 85       	ldd	r25, Z+11	; 0x0b
   3e3dc:	97 83       	std	Z+7, r25	; 0x07
  (*state)[2][3]=(*state)[3][3];
   3e3de:	97 85       	ldd	r25, Z+15	; 0x0f
   3e3e0:	93 87       	std	Z+11, r25	; 0x0b
  (*state)[3][3]=temp;
   3e3e2:	87 87       	std	Z+15, r24	; 0x0f
}
   3e3e4:	08 95       	ret

0003e3e6 <Cipher>:
{
   3e3e6:	9f 92       	push	r9
   3e3e8:	af 92       	push	r10
   3e3ea:	bf 92       	push	r11
   3e3ec:	cf 92       	push	r12
   3e3ee:	df 92       	push	r13
   3e3f0:	ef 92       	push	r14
   3e3f2:	ff 92       	push	r15
   3e3f4:	0f 93       	push	r16
   3e3f6:	1f 93       	push	r17
   3e3f8:	cf 93       	push	r28
   3e3fa:	df 93       	push	r29
  AddRoundKey(0);
   3e3fc:	80 e0       	ldi	r24, 0x00	; 0
   3e3fe:	0f 94 58 f1 	call	0x3e2b0	; 0x3e2b0 <AddRoundKey>
  for(round = 1; round < Nr; ++round)
   3e402:	cc 24       	eor	r12, r12
   3e404:	c3 94       	inc	r12
    SubBytes();
   3e406:	0f 94 80 f1 	call	0x3e300	; 0x3e300 <SubBytes>
    ShiftRows();
   3e40a:	0f 94 97 f1 	call	0x3e32e	; 0x3e32e <ShiftRows>
   3e40e:	c0 91 1c 08 	lds	r28, 0x081C	; 0x80081c <state>
   3e412:	d0 91 1d 08 	lds	r29, 0x081D	; 0x80081d <state+0x1>
   3e416:	7e 01       	movw	r14, r28
   3e418:	80 e1       	ldi	r24, 0x10	; 16
   3e41a:	e8 0e       	add	r14, r24
   3e41c:	f1 1c       	adc	r15, r1
    t   = (*state)[i][0];
   3e41e:	a8 80       	ld	r10, Y
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
   3e420:	d9 80       	ldd	r13, Y+1	; 0x01
   3e422:	8a 2d       	mov	r24, r10
   3e424:	8d 25       	eor	r24, r13
   3e426:	0a 81       	ldd	r16, Y+2	; 0x02
   3e428:	1b 81       	ldd	r17, Y+3	; 0x03
   3e42a:	90 2e       	mov	r9, r16
   3e42c:	91 26       	eor	r9, r17
   3e42e:	b8 2e       	mov	r11, r24
   3e430:	b9 24       	eor	r11, r9
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
   3e432:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e436:	8a 25       	eor	r24, r10
   3e438:	8b 25       	eor	r24, r11
   3e43a:	88 83       	st	Y, r24
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
   3e43c:	8d 2d       	mov	r24, r13
   3e43e:	80 27       	eor	r24, r16
   3e440:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e444:	8d 25       	eor	r24, r13
   3e446:	8b 25       	eor	r24, r11
   3e448:	89 83       	std	Y+1, r24	; 0x01
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
   3e44a:	89 2d       	mov	r24, r9
   3e44c:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e450:	80 27       	eor	r24, r16
   3e452:	8b 25       	eor	r24, r11
   3e454:	8a 83       	std	Y+2, r24	; 0x02
    Tm  = (*state)[i][3] ^ t ;        Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
   3e456:	8a 2d       	mov	r24, r10
   3e458:	81 27       	eor	r24, r17
   3e45a:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e45e:	81 27       	eor	r24, r17
   3e460:	8b 25       	eor	r24, r11
   3e462:	8b 83       	std	Y+3, r24	; 0x03
   3e464:	24 96       	adiw	r28, 0x04	; 4
  for(i = 0; i < 4; ++i)
   3e466:	ce 15       	cp	r28, r14
   3e468:	df 05       	cpc	r29, r15
   3e46a:	c9 f6       	brne	.-78     	; 0x3e41e <Cipher+0x38>
    AddRoundKey(round);
   3e46c:	8c 2d       	mov	r24, r12
   3e46e:	0f 94 58 f1 	call	0x3e2b0	; 0x3e2b0 <AddRoundKey>
  for(round = 1; round < Nr; ++round)
   3e472:	c3 94       	inc	r12
   3e474:	8a e0       	ldi	r24, 0x0A	; 10
   3e476:	c8 12       	cpse	r12, r24
   3e478:	c6 cf       	rjmp	.-116    	; 0x3e406 <Cipher+0x20>
  SubBytes();
   3e47a:	0f 94 80 f1 	call	0x3e300	; 0x3e300 <SubBytes>
  ShiftRows();
   3e47e:	0f 94 97 f1 	call	0x3e32e	; 0x3e32e <ShiftRows>
  AddRoundKey(Nr);
   3e482:	8a e0       	ldi	r24, 0x0A	; 10
}
   3e484:	df 91       	pop	r29
   3e486:	cf 91       	pop	r28
   3e488:	1f 91       	pop	r17
   3e48a:	0f 91       	pop	r16
   3e48c:	ff 90       	pop	r15
   3e48e:	ef 90       	pop	r14
   3e490:	df 90       	pop	r13
   3e492:	cf 90       	pop	r12
   3e494:	bf 90       	pop	r11
   3e496:	af 90       	pop	r10
   3e498:	9f 90       	pop	r9
  AddRoundKey(Nr);
   3e49a:	0d 94 58 f1 	jmp	0x3e2b0	; 0x3e2b0 <AddRoundKey>

0003e49e <InvCipher>:
{
   3e49e:	2f 92       	push	r2
   3e4a0:	3f 92       	push	r3
   3e4a2:	4f 92       	push	r4
   3e4a4:	5f 92       	push	r5
   3e4a6:	6f 92       	push	r6
   3e4a8:	7f 92       	push	r7
   3e4aa:	8f 92       	push	r8
   3e4ac:	9f 92       	push	r9
   3e4ae:	af 92       	push	r10
   3e4b0:	bf 92       	push	r11
   3e4b2:	cf 92       	push	r12
   3e4b4:	df 92       	push	r13
   3e4b6:	ef 92       	push	r14
   3e4b8:	ff 92       	push	r15
   3e4ba:	0f 93       	push	r16
   3e4bc:	1f 93       	push	r17
   3e4be:	cf 93       	push	r28
   3e4c0:	df 93       	push	r29
   3e4c2:	00 d0       	rcall	.+0      	; 0x3e4c4 <InvCipher+0x26>
   3e4c4:	1f 92       	push	r1
   3e4c6:	cd b7       	in	r28, 0x3d	; 61
   3e4c8:	de b7       	in	r29, 0x3e	; 62
  AddRoundKey(Nr);
   3e4ca:	8a e0       	ldi	r24, 0x0A	; 10
   3e4cc:	0f 94 58 f1 	call	0x3e2b0	; 0x3e2b0 <AddRoundKey>
  for(round=Nr-1;round>0;round--)
   3e4d0:	09 e0       	ldi	r16, 0x09	; 9
    InvShiftRows();
   3e4d2:	0f 94 d6 f1 	call	0x3e3ac	; 0x3e3ac <InvShiftRows>
    InvSubBytes();
   3e4d6:	0f 94 bf f1 	call	0x3e37e	; 0x3e37e <InvSubBytes>
    AddRoundKey(round);
   3e4da:	80 2f       	mov	r24, r16
   3e4dc:	0f 94 58 f1 	call	0x3e2b0	; 0x3e2b0 <AddRoundKey>
   3e4e0:	e0 90 1c 08 	lds	r14, 0x081C	; 0x80081c <state>
   3e4e4:	f0 90 1d 08 	lds	r15, 0x081D	; 0x80081d <state+0x1>
   3e4e8:	c7 01       	movw	r24, r14
   3e4ea:	40 96       	adiw	r24, 0x10	; 16
   3e4ec:	9a 83       	std	Y+2, r25	; 0x02
   3e4ee:	89 83       	std	Y+1, r24	; 0x01
    a = (*state)[i][0];
   3e4f0:	f7 01       	movw	r30, r14
   3e4f2:	b0 80       	ld	r11, Z
    b = (*state)[i][1];
   3e4f4:	c1 80       	ldd	r12, Z+1	; 0x01
    c = (*state)[i][2];
   3e4f6:	d2 80       	ldd	r13, Z+2	; 0x02
    d = (*state)[i][3];
   3e4f8:	73 80       	ldd	r7, Z+3	; 0x03
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
   3e4fa:	8b 2d       	mov	r24, r11
   3e4fc:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e500:	8b 83       	std	Y+3, r24	; 0x03
   3e502:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e506:	8c 83       	std	Y+4, r24	; 0x04
   3e508:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e50c:	88 2e       	mov	r8, r24
   3e50e:	8c 2d       	mov	r24, r12
   3e510:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e514:	18 2f       	mov	r17, r24
   3e516:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e51a:	48 2e       	mov	r4, r24
   3e51c:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e520:	98 2e       	mov	r9, r24
   3e522:	8d 2d       	mov	r24, r13
   3e524:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e528:	28 2e       	mov	r2, r24
   3e52a:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e52e:	38 2e       	mov	r3, r24
   3e530:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e534:	a8 2e       	mov	r10, r24
   3e536:	87 2d       	mov	r24, r7
   3e538:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e53c:	58 2e       	mov	r5, r24
   3e53e:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e542:	68 2e       	mov	r6, r24
   3e544:	0f 94 b4 f1 	call	0x3e368	; 0x3e368 <xtime>
   3e548:	9b 81       	ldd	r25, Y+3	; 0x03
   3e54a:	fc 81       	ldd	r31, Y+4	; 0x04
   3e54c:	9f 27       	eor	r25, r31
   3e54e:	98 25       	eor	r25, r8
   3e550:	91 27       	eor	r25, r17
   3e552:	99 25       	eor	r25, r9
   3e554:	93 25       	eor	r25, r3
   3e556:	9a 25       	eor	r25, r10
   3e558:	98 27       	eor	r25, r24
   3e55a:	9c 25       	eor	r25, r12
   3e55c:	9d 25       	eor	r25, r13
   3e55e:	97 25       	eor	r25, r7
   3e560:	f7 01       	movw	r30, r14
   3e562:	90 83       	st	Z, r25
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
   3e564:	98 2d       	mov	r25, r8
   3e566:	91 27       	eor	r25, r17
   3e568:	94 25       	eor	r25, r4
   3e56a:	99 25       	eor	r25, r9
   3e56c:	92 25       	eor	r25, r2
   3e56e:	9a 25       	eor	r25, r10
   3e570:	96 25       	eor	r25, r6
   3e572:	98 27       	eor	r25, r24
   3e574:	9b 25       	eor	r25, r11
   3e576:	9d 25       	eor	r25, r13
   3e578:	97 25       	eor	r25, r7
   3e57a:	91 83       	std	Z+1, r25	; 0x01
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
   3e57c:	fc 81       	ldd	r31, Y+4	; 0x04
   3e57e:	f8 25       	eor	r31, r8
   3e580:	f9 25       	eor	r31, r9
   3e582:	2f 26       	eor	r2, r31
   3e584:	32 24       	eor	r3, r2
   3e586:	3a 24       	eor	r3, r10
   3e588:	35 24       	eor	r3, r5
   3e58a:	38 26       	eor	r3, r24
   3e58c:	3b 24       	eor	r3, r11
   3e58e:	3c 24       	eor	r3, r12
   3e590:	73 24       	eor	r7, r3
   3e592:	f7 01       	movw	r30, r14
   3e594:	72 82       	std	Z+2, r7	; 0x02
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
   3e596:	fb 81       	ldd	r31, Y+3	; 0x03
   3e598:	f8 25       	eor	r31, r8
   3e59a:	4f 26       	eor	r4, r31
   3e59c:	94 24       	eor	r9, r4
   3e59e:	a9 24       	eor	r10, r9
   3e5a0:	5a 24       	eor	r5, r10
   3e5a2:	65 24       	eor	r6, r5
   3e5a4:	86 25       	eor	r24, r6
   3e5a6:	b8 26       	eor	r11, r24
   3e5a8:	cb 24       	eor	r12, r11
   3e5aa:	dc 24       	eor	r13, r12
   3e5ac:	f7 01       	movw	r30, r14
   3e5ae:	d3 82       	std	Z+3, r13	; 0x03
   3e5b0:	f4 e0       	ldi	r31, 0x04	; 4
   3e5b2:	ef 0e       	add	r14, r31
   3e5b4:	f1 1c       	adc	r15, r1
  for(i=0;i<4;++i)
   3e5b6:	89 81       	ldd	r24, Y+1	; 0x01
   3e5b8:	9a 81       	ldd	r25, Y+2	; 0x02
   3e5ba:	8e 15       	cp	r24, r14
   3e5bc:	9f 05       	cpc	r25, r15
   3e5be:	09 f0       	breq	.+2      	; 0x3e5c2 <InvCipher+0x124>
   3e5c0:	97 cf       	rjmp	.-210    	; 0x3e4f0 <InvCipher+0x52>
  for(round=Nr-1;round>0;round--)
   3e5c2:	01 50       	subi	r16, 0x01	; 1
   3e5c4:	09 f0       	breq	.+2      	; 0x3e5c8 <InvCipher+0x12a>
   3e5c6:	85 cf       	rjmp	.-246    	; 0x3e4d2 <InvCipher+0x34>
  InvShiftRows();
   3e5c8:	0f 94 d6 f1 	call	0x3e3ac	; 0x3e3ac <InvShiftRows>
  InvSubBytes();
   3e5cc:	0f 94 bf f1 	call	0x3e37e	; 0x3e37e <InvSubBytes>
  AddRoundKey(0);
   3e5d0:	80 e0       	ldi	r24, 0x00	; 0
}
   3e5d2:	0f 90       	pop	r0
   3e5d4:	0f 90       	pop	r0
   3e5d6:	0f 90       	pop	r0
   3e5d8:	0f 90       	pop	r0
   3e5da:	df 91       	pop	r29
   3e5dc:	cf 91       	pop	r28
   3e5de:	1f 91       	pop	r17
   3e5e0:	0f 91       	pop	r16
   3e5e2:	ff 90       	pop	r15
   3e5e4:	ef 90       	pop	r14
   3e5e6:	df 90       	pop	r13
   3e5e8:	cf 90       	pop	r12
   3e5ea:	bf 90       	pop	r11
   3e5ec:	af 90       	pop	r10
   3e5ee:	9f 90       	pop	r9
   3e5f0:	8f 90       	pop	r8
   3e5f2:	7f 90       	pop	r7
   3e5f4:	6f 90       	pop	r6
   3e5f6:	5f 90       	pop	r5
   3e5f8:	4f 90       	pop	r4
   3e5fa:	3f 90       	pop	r3
   3e5fc:	2f 90       	pop	r2
  AddRoundKey(0);
   3e5fe:	0d 94 58 f1 	jmp	0x3e2b0	; 0x3e2b0 <AddRoundKey>

0003e602 <sendchar>:
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e602:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e606:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3e60a:	86 ff       	sbrs	r24, 6
   3e60c:	fc cf       	rjmp	.-8      	; 0x3e606 <sendchar+0x4>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e60e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3e612:	80 64       	ori	r24, 0x40	; 64
   3e614:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
}
   3e618:	08 95       	ret

0003e61a <PrintDecInt>:
{
   3e61a:	0f 93       	push	r16
   3e61c:	1f 93       	push	r17
   3e61e:	cf 93       	push	r28
   3e620:	df 93       	push	r29
   3e622:	ec 01       	movw	r28, r24
   3e624:	8b 01       	movw	r16, r22
	if ((myNumber > 100) || (digitCnt >= 3))
   3e626:	85 36       	cpi	r24, 0x65	; 101
   3e628:	91 05       	cpc	r25, r1
   3e62a:	1c f4       	brge	.+6      	; 0x3e632 <PrintDecInt+0x18>
   3e62c:	63 30       	cpi	r22, 0x03	; 3
   3e62e:	71 05       	cpc	r23, r1
   3e630:	4c f0       	brlt	.+18     	; 0x3e644 <PrintDecInt+0x2a>
		theChar		=	0x30 + myNumber / 100;
   3e632:	ce 01       	movw	r24, r28
   3e634:	64 e6       	ldi	r22, 0x64	; 100
   3e636:	70 e0       	ldi	r23, 0x00	; 0
   3e638:	0f 94 7d f7 	call	0x3eefa	; 0x3eefa <__divmodhi4>
		sendchar(theChar );
   3e63c:	80 e3       	ldi	r24, 0x30	; 48
   3e63e:	86 0f       	add	r24, r22
   3e640:	0f 94 01 f3 	call	0x3e602	; 0x3e602 <sendchar>
	if ((myNumber > 10) || (digitCnt >= 2))
   3e644:	cb 30       	cpi	r28, 0x0B	; 11
   3e646:	d1 05       	cpc	r29, r1
   3e648:	1c f4       	brge	.+6      	; 0x3e650 <PrintDecInt+0x36>
   3e64a:	02 30       	cpi	r16, 0x02	; 2
   3e64c:	11 05       	cpc	r17, r1
   3e64e:	6c f0       	brlt	.+26     	; 0x3e66a <PrintDecInt+0x50>
		theChar	=	0x30  + ((myNumber % 100) / 10 );
   3e650:	ce 01       	movw	r24, r28
   3e652:	64 e6       	ldi	r22, 0x64	; 100
   3e654:	70 e0       	ldi	r23, 0x00	; 0
   3e656:	0f 94 7d f7 	call	0x3eefa	; 0x3eefa <__divmodhi4>
   3e65a:	6a e0       	ldi	r22, 0x0A	; 10
   3e65c:	70 e0       	ldi	r23, 0x00	; 0
   3e65e:	0f 94 7d f7 	call	0x3eefa	; 0x3eefa <__divmodhi4>
		sendchar(theChar );
   3e662:	80 e3       	ldi	r24, 0x30	; 48
   3e664:	86 0f       	add	r24, r22
   3e666:	0f 94 01 f3 	call	0x3e602	; 0x3e602 <sendchar>
	theChar	=	0x30 + (myNumber % 10);
   3e66a:	ce 01       	movw	r24, r28
   3e66c:	6a e0       	ldi	r22, 0x0A	; 10
   3e66e:	70 e0       	ldi	r23, 0x00	; 0
   3e670:	0f 94 7d f7 	call	0x3eefa	; 0x3eefa <__divmodhi4>
	sendchar(theChar );
   3e674:	80 5d       	subi	r24, 0xD0	; 208
}
   3e676:	df 91       	pop	r29
   3e678:	cf 91       	pop	r28
   3e67a:	1f 91       	pop	r17
   3e67c:	0f 91       	pop	r16
	sendchar(theChar );
   3e67e:	0d 94 01 f3 	jmp	0x3e602	; 0x3e602 <sendchar>

0003e682 <delay_ms>:
	for (i=0;i<timedelay;i++)
   3e682:	30 e0       	ldi	r19, 0x00	; 0
   3e684:	20 e0       	ldi	r18, 0x00	; 0
   3e686:	28 17       	cp	r18, r24
   3e688:	39 07       	cpc	r19, r25
   3e68a:	09 f4       	brne	.+2      	; 0x3e68e <delay_ms+0xc>
}
   3e68c:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3e68e:	ef ec       	ldi	r30, 0xCF	; 207
   3e690:	f7 e0       	ldi	r31, 0x07	; 7
   3e692:	31 97       	sbiw	r30, 0x01	; 1
   3e694:	f1 f7       	brne	.-4      	; 0x3e692 <delay_ms+0x10>
   3e696:	00 c0       	rjmp	.+0      	; 0x3e698 <delay_ms+0x16>
   3e698:	00 00       	nop
	for (i=0;i<timedelay;i++)
   3e69a:	2f 5f       	subi	r18, 0xFF	; 255
   3e69c:	3f 4f       	sbci	r19, 0xFF	; 255
   3e69e:	f3 cf       	rjmp	.-26     	; 0x3e686 <delay_ms+0x4>

0003e6a0 <getData>:
	return UART_DATA_REG;
}
unsigned char getData(unsigned int* boot_state)
{
  unsigned char c;
  if (*boot_state==1)
   3e6a0:	fc 01       	movw	r30, r24
   3e6a2:	20 81       	ld	r18, Z
   3e6a4:	31 81       	ldd	r19, Z+1	; 0x01
   3e6a6:	21 30       	cpi	r18, 0x01	; 1
   3e6a8:	31 05       	cpc	r19, r1
   3e6aa:	91 f4       	brne	.+36     	; 0x3e6d0 <getData+0x30>
  {
    *boot_state	=	0;
   3e6ac:	11 82       	std	Z+1, r1	; 0x01
   3e6ae:	10 82       	st	Z, r1
	return UART_DATA_REG;
   3e6b0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  //	c	=	recchar();
    c	=	recchar_timeout();

  }
  return c;
}
   3e6b4:	08 95       	ret
   3e6b6:	01 97       	sbiw	r24, 0x01	; 1
   3e6b8:	a1 09       	sbc	r26, r1
   3e6ba:	b1 09       	sbc	r27, r1
		if (count > MAX_TIME_COUNT)
   3e6bc:	69 f4       	brne	.+26     	; 0x3e6d8 <getData+0x38>
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
   3e6be:	ab bf       	out	0x3b, r26	; 59
   3e6c0:	fc 01       	movw	r30, r24
   3e6c2:	87 91       	elpm	r24, Z+
   3e6c4:	96 91       	elpm	r25, Z
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
   3e6c6:	01 96       	adiw	r24, 0x01	; 1
   3e6c8:	19 f0       	breq	.+6      	; 0x3e6d0 <getData+0x30>
				asm volatile(
   3e6ca:	ee 27       	eor	r30, r30
   3e6cc:	ff 27       	eor	r31, r31
   3e6ce:	09 94       	ijmp
{
   3e6d0:	81 e0       	ldi	r24, 0x01	; 1
   3e6d2:	92 e1       	ldi	r25, 0x12	; 18
   3e6d4:	aa e7       	ldi	r26, 0x7A	; 122
   3e6d6:	b0 e0       	ldi	r27, 0x00	; 0
	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   3e6d8:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3e6dc:	27 ff       	sbrs	r18, 7
   3e6de:	eb cf       	rjmp	.-42     	; 0x3e6b6 <getData+0x16>
   3e6e0:	e7 cf       	rjmp	.-50     	; 0x3e6b0 <getData+0x10>

0003e6e2 <main>:
}authenticationNumber;

#define AUTHENTICATION

int main(void)
{
   3e6e2:	cf 93       	push	r28
   3e6e4:	df 93       	push	r29
   3e6e6:	cd b7       	in	r28, 0x3d	; 61
   3e6e8:	de b7       	in	r29, 0x3e	; 62
   3e6ea:	c7 52       	subi	r28, 0x27	; 39
   3e6ec:	d1 40       	sbci	r29, 0x01	; 1
   3e6ee:	0f b6       	in	r0, 0x3f	; 63
   3e6f0:	f8 94       	cli
   3e6f2:	de bf       	out	0x3e, r29	; 62
   3e6f4:	0f be       	out	0x3f, r0	; 63
   3e6f6:	cd bf       	out	0x3d, r28	; 61
	unsigned int	rcvdCharCntr	=	0;
#endif

	//*	some chips dont set the stack properly
	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
   3e6f8:	01 e2       	ldi	r16, 0x21	; 33
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3e6fa:	0e bf       	out	0x3e, r16	; 62
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3e6fc:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3e6fe:	0d bf       	out	0x3d, r16	; 61
#ifdef _FIX_ISSUE_181_
	//************************************************************************
	//*	Dec 29,	2011	<MLS> Issue #181, added watch dog timmer support
	//*	handle the watch dog timer
	uint8_t	mcuStatusReg;
	mcuStatusReg	=	MCUSR;
   3e700:	94 b7       	in	r25, 0x34	; 52

	__asm__ __volatile__ ("cli");
   3e702:	f8 94       	cli
	__asm__ __volatile__ ("wdr");
   3e704:	a8 95       	wdr
	MCUSR	=	0;
   3e706:	14 be       	out	0x34, r1	; 52
	WDTCSR	|=	_BV(WDCE) | _BV(WDE);
   3e708:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   3e70c:	88 61       	ori	r24, 0x18	; 24
   3e70e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	WDTCSR	=	0;
   3e712:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	__asm__ __volatile__ ("sei");
   3e716:	78 94       	sei
	// check if WDT generated the reset, if so, go straight to app
	if (mcuStatusReg & _BV(WDRF))
   3e718:	93 ff       	sbrs	r25, 3
   3e71a:	05 c0       	rjmp	.+10     	; 0x3e726 <main+0x44>
	{
		app_start();
   3e71c:	e0 91 66 07 	lds	r30, 0x0766	; 0x800766 <__data_end>
   3e720:	f0 91 67 07 	lds	r31, 0x0767	; 0x800767 <__data_end+0x1>
   3e724:	19 95       	eicall
// #else
// 	boot_timeout	=	3500000; // 7 seconds , approx 2us per step when optimize "s"
// #endif

	boot_timer	=	0;
	boot_state	=	0;
   3e726:	c2 5e       	subi	r28, 0xE2	; 226
   3e728:	de 4f       	sbci	r29, 0xFE	; 254
   3e72a:	19 82       	std	Y+1, r1	; 0x01
   3e72c:	18 82       	st	Y, r1
   3e72e:	ce 51       	subi	r28, 0x1E	; 30
   3e730:	d1 40       	sbci	r29, 0x01	; 1
	/*
	 * Init UART
	 * set baudrate and enable USART receiver and transmiter without interrupts
	 */
#if UART_BAUDRATE_DOUBLE_SPEED
	UART_STATUS_REG		|=	(1 <<UART_DOUBLE_SPEED);
   3e732:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3e736:	82 60       	ori	r24, 0x02	; 2
   3e738:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
#endif
	UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE,F_CPU);
   3e73c:	80 e1       	ldi	r24, 0x10	; 16
   3e73e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UART_CONTROL_REG	=	(1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);
   3e742:	88 e1       	ldi	r24, 0x18	; 24
   3e744:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>

	asm volatile ("nop");			// wait until port has changed
   3e748:	00 00       	nop
	boot_timer	=	0;
   3e74a:	40 e0       	ldi	r20, 0x00	; 0
   3e74c:	50 e0       	ldi	r21, 0x00	; 0
   3e74e:	ba 01       	movw	r22, r20
		{
			_delay_ms(0.001);
			boot_timer++;
			if (boot_timer > boot_timeout)
			{
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
   3e750:	21 e0       	ldi	r18, 0x01	; 1
   3e752:	30 e0       	ldi	r19, 0x00	; 0
	while (boot_state==0)
   3e754:	c2 5e       	subi	r28, 0xE2	; 226
   3e756:	de 4f       	sbci	r29, 0xFE	; 254
   3e758:	88 81       	ld	r24, Y
   3e75a:	99 81       	ldd	r25, Y+1	; 0x01
   3e75c:	ce 51       	subi	r28, 0x1E	; 30
   3e75e:	d1 40       	sbci	r29, 0x01	; 1
   3e760:	00 97       	sbiw	r24, 0x00	; 0
   3e762:	d9 f1       	breq	.+118    	; 0x3e7da <main+0xf8>
// sendchar(0x32);




	if (boot_state==1)
   3e764:	01 97       	sbiw	r24, 0x01	; 1
   3e766:	09 f0       	breq	.+2      	; 0x3e76a <main+0x88>
   3e768:	68 c2       	rjmp	.+1232   	; 0x3ec3a <main+0x558>
	unsigned char isAuthenticated = 0x00;
   3e76a:	cc 5d       	subi	r28, 0xDC	; 220
   3e76c:	de 4f       	sbci	r29, 0xFE	; 254
   3e76e:	18 82       	st	Y, r1
   3e770:	c4 52       	subi	r28, 0x24	; 36
   3e772:	d1 40       	sbci	r29, 0x01	; 1
	unsigned char	seqNum			=	0;
   3e774:	cb 5d       	subi	r28, 0xDB	; 219
   3e776:	de 4f       	sbci	r29, 0xFE	; 254
   3e778:	18 82       	st	Y, r1
   3e77a:	c5 52       	subi	r28, 0x25	; 37
   3e77c:	d1 40       	sbci	r29, 0x01	; 1
	unsigned char	checksum		=	0;
   3e77e:	b1 2c       	mov	r11, r1
	unsigned int	ii				=	0;
   3e780:	91 2c       	mov	r9, r1
   3e782:	81 2c       	mov	r8, r1
	address_t		eraseAddress	=	0;
   3e784:	c0 5e       	subi	r28, 0xE0	; 224
   3e786:	de 4f       	sbci	r29, 0xFE	; 254
   3e788:	18 82       	st	Y, r1
   3e78a:	19 82       	std	Y+1, r1	; 0x01
   3e78c:	1a 82       	std	Y+2, r1	; 0x02
   3e78e:	1b 82       	std	Y+3, r1	; 0x03
   3e790:	c0 52       	subi	r28, 0x20	; 32
   3e792:	d1 40       	sbci	r29, 0x01	; 1
	address_t		address			=	0;
   3e794:	41 2c       	mov	r4, r1
   3e796:	51 2c       	mov	r5, r1
   3e798:	32 01       	movw	r6, r4
  unsigned char  packetSize = 0;
   3e79a:	ca 5d       	subi	r28, 0xDA	; 218
   3e79c:	de 4f       	sbci	r29, 0xFE	; 254
   3e79e:	18 82       	st	Y, r1
   3e7a0:	c6 52       	subi	r28, 0x26	; 38
   3e7a2:	d1 40       	sbci	r29, 0x01	; 1
						}
						break;
						}
					case ST_GET_DATA:
					{
						msgBuffer[ii++]	=	c;
   3e7a4:	fe 01       	movw	r30, r28
   3e7a6:	31 96       	adiw	r30, 0x01	; 1
   3e7a8:	1f 01       	movw	r2, r30
	boot_timer	=	0;
   3e7aa:	10 e0       	ldi	r17, 0x00	; 0
   3e7ac:	00 e0       	ldi	r16, 0x00	; 0
   3e7ae:	43 c0       	rjmp	.+134    	; 0x3e836 <main+0x154>
   3e7b0:	85 e0       	ldi	r24, 0x05	; 5
   3e7b2:	8a 95       	dec	r24
   3e7b4:	f1 f7       	brne	.-4      	; 0x3e7b2 <main+0xd0>
   3e7b6:	00 00       	nop
			boot_timer++;
   3e7b8:	4f 5f       	subi	r20, 0xFF	; 255
   3e7ba:	5f 4f       	sbci	r21, 0xFF	; 255
   3e7bc:	6f 4f       	sbci	r22, 0xFF	; 255
   3e7be:	7f 4f       	sbci	r23, 0xFF	; 255
			if (boot_timer > boot_timeout)
   3e7c0:	41 3e       	cpi	r20, 0xE1	; 225
   3e7c2:	97 e6       	ldi	r25, 0x67	; 103
   3e7c4:	59 07       	cpc	r21, r25
   3e7c6:	95 e3       	ldi	r25, 0x35	; 53
   3e7c8:	69 07       	cpc	r22, r25
   3e7ca:	71 05       	cpc	r23, r1
   3e7cc:	30 f0       	brcs	.+12     	; 0x3e7da <main+0xf8>
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
   3e7ce:	c2 5e       	subi	r28, 0xE2	; 226
   3e7d0:	de 4f       	sbci	r29, 0xFE	; 254
   3e7d2:	39 83       	std	Y+1, r19	; 0x01
   3e7d4:	28 83       	st	Y, r18
   3e7d6:	ce 51       	subi	r28, 0x1E	; 30
   3e7d8:	d1 40       	sbci	r29, 0x01	; 1
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3e7da:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3e7de:	c2 5e       	subi	r28, 0xE2	; 226
   3e7e0:	de 4f       	sbci	r29, 0xFE	; 254
   3e7e2:	88 81       	ld	r24, Y
   3e7e4:	99 81       	ldd	r25, Y+1	; 0x01
   3e7e6:	ce 51       	subi	r28, 0x1E	; 30
   3e7e8:	d1 40       	sbci	r29, 0x01	; 1
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
   3e7ea:	e7 fd       	sbrc	r30, 7
   3e7ec:	02 c0       	rjmp	.+4      	; 0x3e7f2 <main+0x110>
   3e7ee:	00 97       	sbiw	r24, 0x00	; 0
   3e7f0:	f9 f2       	breq	.-66     	; 0x3e7b0 <main+0xce>
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
   3e7f2:	01 96       	adiw	r24, 0x01	; 1
   3e7f4:	c2 5e       	subi	r28, 0xE2	; 226
   3e7f6:	de 4f       	sbci	r29, 0xFE	; 254
   3e7f8:	99 83       	std	Y+1, r25	; 0x01
   3e7fa:	88 83       	st	Y, r24
   3e7fc:	ce 51       	subi	r28, 0x1E	; 30
   3e7fe:	d1 40       	sbci	r29, 0x01	; 1
   3e800:	a9 cf       	rjmp	.-174    	; 0x3e754 <main+0x72>
		     else if(packetRetrieveState == SOTA_PACKET_RETRIEVE_SIZE)
   3e802:	a1 e0       	ldi	r26, 0x01	; 1
   3e804:	fa 12       	cpse	r15, r26
   3e806:	19 c0       	rjmp	.+50     	; 0x3e83a <main+0x158>
		       unsigned char lowest = getData(&boot_state);
   3e808:	ce 01       	movw	r24, r28
   3e80a:	82 5e       	subi	r24, 0xE2	; 226
   3e80c:	9e 4f       	sbci	r25, 0xFE	; 254
   3e80e:	0f 94 50 f3 	call	0x3e6a0	; 0x3e6a0 <getData>
   3e812:	ca 5d       	subi	r28, 0xDA	; 218
   3e814:	de 4f       	sbci	r29, 0xFE	; 254
   3e816:	88 83       	st	Y, r24
   3e818:	c6 52       	subi	r28, 0x26	; 38
   3e81a:	d1 40       	sbci	r29, 0x01	; 1
	boot_timer	=	0;
   3e81c:	32 e0       	ldi	r19, 0x02	; 2
   3e81e:	f3 2e       	mov	r15, r19
		     c = getData(&boot_state);
   3e820:	ce 01       	movw	r24, r28
   3e822:	82 5e       	subi	r24, 0xE2	; 226
   3e824:	9e 4f       	sbci	r25, 0xFE	; 254
   3e826:	0f 94 50 f3 	call	0x3e6a0	; 0x3e6a0 <getData>
		     if (packetRetrieveState == SOTA_PACKET_RETRIEVE_START)
   3e82a:	f1 10       	cpse	r15, r1
   3e82c:	ea cf       	rjmp	.-44     	; 0x3e802 <main+0x120>
		     if(c == SOTA_MESSAGE_START)
   3e82e:	ff 24       	eor	r15, r15
   3e830:	f3 94       	inc	r15
   3e832:	88 35       	cpi	r24, 0x58	; 88
   3e834:	a9 f3       	breq	.-22     	; 0x3e820 <main+0x13e>
	boot_timer	=	0;
   3e836:	f1 2c       	mov	r15, r1
   3e838:	f3 cf       	rjmp	.-26     	; 0x3e820 <main+0x13e>
		     else if(packetRetrieveState == SOTA_PACKET_RETRIEVE_PROCESSING)
   3e83a:	b2 e0       	ldi	r27, 0x02	; 2
   3e83c:	fb 12       	cpse	r15, r27
   3e83e:	10 c0       	rjmp	.+32     	; 0x3e860 <main+0x17e>
		       if(packetRetrieveIndex < packetSize){
   3e840:	ca 5d       	subi	r28, 0xDA	; 218
   3e842:	de 4f       	sbci	r29, 0xFE	; 254
   3e844:	e8 81       	ld	r30, Y
   3e846:	c6 52       	subi	r28, 0x26	; 38
   3e848:	d1 40       	sbci	r29, 0x01	; 1
   3e84a:	e0 17       	cp	r30, r16
   3e84c:	11 06       	cpc	r1, r17
   3e84e:	59 f0       	breq	.+22     	; 0x3e866 <main+0x184>
   3e850:	54 f0       	brlt	.+20     	; 0x3e866 <main+0x184>
		       receivedPacket[packetRetrieveIndex] = c;
   3e852:	f8 01       	movw	r30, r16
   3e854:	ec 5d       	subi	r30, 0xDC	; 220
   3e856:	fc 4f       	sbci	r31, 0xFC	; 252
   3e858:	80 83       	st	Z, r24
		  		packetRetrieveIndex++;
   3e85a:	0f 5f       	subi	r16, 0xFF	; 255
   3e85c:	1f 4f       	sbci	r17, 0xFF	; 255
   3e85e:	de cf       	rjmp	.-68     	; 0x3e81c <main+0x13a>
		   while ( packetRetrieveState != SOTA_PACKET_RETRIEVE_FINISHED )
   3e860:	f3 e0       	ldi	r31, 0x03	; 3
   3e862:	ff 12       	cpse	r15, r31
   3e864:	dd cf       	rjmp	.-70     	; 0x3e820 <main+0x13e>
		   aes_decrypt(aes_buffer, receivedPacket, packetSize);
   3e866:	ca 5d       	subi	r28, 0xDA	; 218
   3e868:	de 4f       	sbci	r29, 0xFE	; 254
   3e86a:	28 81       	ld	r18, Y
   3e86c:	c6 52       	subi	r28, 0x26	; 38
   3e86e:	d1 40       	sbci	r29, 0x01	; 1
   3e870:	e2 2e       	mov	r14, r18
   3e872:	f1 2c       	mov	r15, r1
  uint8_t extra = length % BLOCKLEN; /* Remaining bytes in the last non-full block */
   3e874:	2f 70       	andi	r18, 0x0F	; 15
   3e876:	a2 2e       	mov	r10, r18
    Key = key;
   3e878:	86 e4       	ldi	r24, 0x46	; 70
   3e87a:	97 e0       	ldi	r25, 0x07	; 7
   3e87c:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <Key+0x1>
   3e880:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <Key>
    KeyExpansion();
   3e884:	0f 94 af f0 	call	0x3e15e	; 0x3e15e <KeyExpansion>
    Iv = (uint8_t*)iv;
   3e888:	a6 e5       	ldi	r26, 0x56	; 86
   3e88a:	b7 e0       	ldi	r27, 0x07	; 7
   3e88c:	b0 93 69 07 	sts	0x0769, r27	; 0x800769 <Iv+0x1>
   3e890:	a0 93 68 07 	sts	0x0768, r26	; 0x800768 <Iv>
   3e894:	b4 e2       	ldi	r27, 0x24	; 36
   3e896:	cb 2e       	mov	r12, r27
   3e898:	b3 e0       	ldi	r27, 0x03	; 3
   3e89a:	db 2e       	mov	r13, r27
   3e89c:	04 e0       	ldi	r16, 0x04	; 4
   3e89e:	12 e0       	ldi	r17, 0x02	; 2
  for (i = 0; i < length; i += BLOCKLEN)
   3e8a0:	c8 01       	movw	r24, r16
   3e8a2:	84 50       	subi	r24, 0x04	; 4
   3e8a4:	92 40       	sbci	r25, 0x02	; 2
   3e8a6:	8e 15       	cp	r24, r14
   3e8a8:	9f 05       	cpc	r25, r15
   3e8aa:	08 f1       	brcs	.+66     	; 0x3e8ee <main+0x20c>
  if (extra)
   3e8ac:	aa 20       	and	r10, r10
   3e8ae:	61 f0       	breq	.+24     	; 0x3e8c8 <main+0x1e6>
    memcpy(output, input, extra);
   3e8b0:	4a 2d       	mov	r20, r10
   3e8b2:	50 e0       	ldi	r21, 0x00	; 0
   3e8b4:	b6 01       	movw	r22, r12
   3e8b6:	c8 01       	movw	r24, r16
   3e8b8:	0f 94 ac f7 	call	0x3ef58	; 0x3ef58 <memcpy>
    state = (state_t*)output;
   3e8bc:	10 93 1d 08 	sts	0x081D, r17	; 0x80081d <state+0x1>
   3e8c0:	00 93 1c 08 	sts	0x081C, r16	; 0x80081c <state>
    InvCipher();
   3e8c4:	0f 94 4f f2 	call	0x3e49e	; 0x3e49e <InvCipher>
    Iv = (uint8_t*)iv;
   3e8c8:	e4 e0       	ldi	r30, 0x04	; 4
   3e8ca:	f2 e0       	ldi	r31, 0x02	; 2
   3e8cc:	90 e0       	ldi	r25, 0x00	; 0
   3e8ce:	80 e0       	ldi	r24, 0x00	; 0
   3e8d0:	40 e0       	ldi	r20, 0x00	; 0
				c = aes_buffer[receivedPacketIndex];
   3e8d2:	51 91       	ld	r21, Z+
				switch (msgParseState)
   3e8d4:	43 30       	cpi	r20, 0x03	; 3
   3e8d6:	d9 f1       	breq	.+118    	; 0x3e94e <main+0x26c>
   3e8d8:	20 f5       	brcc	.+72     	; 0x3e922 <main+0x240>
   3e8da:	41 30       	cpi	r20, 0x01	; 1
   3e8dc:	81 f1       	breq	.+96     	; 0x3e93e <main+0x25c>
   3e8de:	48 f1       	brcs	.+82     	; 0x3e932 <main+0x250>
						msgLength		=	c<<8;
   3e8e0:	85 2f       	mov	r24, r21
   3e8e2:	90 e0       	ldi	r25, 0x00	; 0
   3e8e4:	98 2f       	mov	r25, r24
   3e8e6:	88 27       	eor	r24, r24
						checksum		^=	c;
   3e8e8:	b5 26       	eor	r11, r21
						msgParseState	=	ST_MSG_SIZE_2;
   3e8ea:	43 e0       	ldi	r20, 0x03	; 3
						break;
   3e8ec:	f2 cf       	rjmp	.-28     	; 0x3e8d2 <main+0x1f0>
    memcpy(output, input, BLOCKLEN);
   3e8ee:	80 e1       	ldi	r24, 0x10	; 16
   3e8f0:	f6 01       	movw	r30, r12
   3e8f2:	d8 01       	movw	r26, r16
   3e8f4:	01 90       	ld	r0, Z+
   3e8f6:	0d 92       	st	X+, r0
   3e8f8:	8a 95       	dec	r24
   3e8fa:	e1 f7       	brne	.-8      	; 0x3e8f4 <main+0x212>
    state = (state_t*)output;
   3e8fc:	10 93 1d 08 	sts	0x081D, r17	; 0x80081d <state+0x1>
   3e900:	00 93 1c 08 	sts	0x081C, r16	; 0x80081c <state>
    InvCipher();
   3e904:	0f 94 4f f2 	call	0x3e49e	; 0x3e49e <InvCipher>
    XorWithIv(output);
   3e908:	c8 01       	movw	r24, r16
   3e90a:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <XorWithIv>
    Iv = input;
   3e90e:	d0 92 69 07 	sts	0x0769, r13	; 0x800769 <Iv+0x1>
   3e912:	c0 92 68 07 	sts	0x0768, r12	; 0x800768 <Iv>
    input += BLOCKLEN;
   3e916:	b0 e1       	ldi	r27, 0x10	; 16
   3e918:	cb 0e       	add	r12, r27
   3e91a:	d1 1c       	adc	r13, r1
    output += BLOCKLEN;
   3e91c:	00 5f       	subi	r16, 0xF0	; 240
   3e91e:	1f 4f       	sbci	r17, 0xFF	; 255
   3e920:	bf cf       	rjmp	.-130    	; 0x3e8a0 <main+0x1be>
				switch (msgParseState)
   3e922:	45 30       	cpi	r20, 0x05	; 5
   3e924:	01 f1       	breq	.+64     	; 0x3e966 <main+0x284>
   3e926:	b8 f0       	brcs	.+46     	; 0x3e956 <main+0x274>
   3e928:	46 30       	cpi	r20, 0x06	; 6
   3e92a:	69 f1       	breq	.+90     	; 0x3e986 <main+0x2a4>
			while (msgParseState != ST_PROCESS )
   3e92c:	47 30       	cpi	r20, 0x07	; 7
   3e92e:	89 f6       	brne	.-94     	; 0x3e8d2 <main+0x1f0>
   3e930:	2c c0       	rjmp	.+88     	; 0x3e98a <main+0x2a8>
						if ( c == MESSAGE_START )
   3e932:	5b 31       	cpi	r21, 0x1B	; 27
   3e934:	71 f6       	brne	.-100    	; 0x3e8d2 <main+0x1f0>
							checksum		=	MESSAGE_START^0;
   3e936:	2b e1       	ldi	r18, 0x1B	; 27
   3e938:	b2 2e       	mov	r11, r18
							msgParseState	=	ST_GET_SEQ_NUM;
   3e93a:	41 e0       	ldi	r20, 0x01	; 1
   3e93c:	ca cf       	rjmp	.-108    	; 0x3e8d2 <main+0x1f0>
						checksum		^=	c;
   3e93e:	b5 26       	eor	r11, r21
				c = aes_buffer[receivedPacketIndex];
   3e940:	cb 5d       	subi	r28, 0xDB	; 219
   3e942:	de 4f       	sbci	r29, 0xFE	; 254
   3e944:	58 83       	st	Y, r21
   3e946:	c5 52       	subi	r28, 0x25	; 37
   3e948:	d1 40       	sbci	r29, 0x01	; 1
						msgParseState	=	ST_MSG_SIZE_1;
   3e94a:	42 e0       	ldi	r20, 0x02	; 2
						break;
   3e94c:	c2 cf       	rjmp	.-124    	; 0x3e8d2 <main+0x1f0>
						msgLength		|=	c;
   3e94e:	85 2b       	or	r24, r21
						checksum		^=	c;
   3e950:	b5 26       	eor	r11, r21
						msgParseState	=	ST_GET_TOKEN;
   3e952:	44 e0       	ldi	r20, 0x04	; 4
						break;
   3e954:	be cf       	rjmp	.-132    	; 0x3e8d2 <main+0x1f0>
						if ( c == TOKEN )
   3e956:	5e 30       	cpi	r21, 0x0E	; 14
   3e958:	09 f0       	breq	.+2      	; 0x3e95c <main+0x27a>
   3e95a:	ba cf       	rjmp	.-140    	; 0x3e8d0 <main+0x1ee>
							checksum		^=	c;
   3e95c:	b5 26       	eor	r11, r21
							ii				=	0;
   3e95e:	91 2c       	mov	r9, r1
   3e960:	81 2c       	mov	r8, r1
							msgParseState	=	ST_GET_DATA;
   3e962:	45 e0       	ldi	r20, 0x05	; 5
   3e964:	b6 cf       	rjmp	.-148    	; 0x3e8d2 <main+0x1f0>
						msgBuffer[ii++]	=	c;
   3e966:	94 01       	movw	r18, r8
   3e968:	2f 5f       	subi	r18, 0xFF	; 255
   3e96a:	3f 4f       	sbci	r19, 0xFF	; 255
   3e96c:	d1 01       	movw	r26, r2
   3e96e:	a8 0d       	add	r26, r8
   3e970:	b9 1d       	adc	r27, r9
   3e972:	5c 93       	st	X, r21
						checksum		^=	c;
   3e974:	b5 26       	eor	r11, r21
						if (ii == msgLength )
   3e976:	49 01       	movw	r8, r18
   3e978:	28 17       	cp	r18, r24
   3e97a:	39 07       	cpc	r19, r25
   3e97c:	09 f0       	breq	.+2      	; 0x3e980 <main+0x29e>
   3e97e:	a9 cf       	rjmp	.-174    	; 0x3e8d2 <main+0x1f0>
   3e980:	4c 01       	movw	r8, r24
						{
							msgParseState	=	ST_GET_CHECK;
   3e982:	46 e0       	ldi	r20, 0x06	; 6
   3e984:	a6 cf       	rjmp	.-180    	; 0x3e8d2 <main+0x1f0>
						break;
					}

					case ST_GET_CHECK:
					{
						if ( c == checksum )
   3e986:	5b 11       	cpse	r21, r11
   3e988:	a3 cf       	rjmp	.-186    	; 0x3e8d0 <main+0x1ee>
	char authBytes[4]
}authenticationToken;

*/

			switch (msgBuffer[0])
   3e98a:	49 81       	ldd	r20, Y+1	; 0x01
   3e98c:	43 31       	cpi	r20, 0x13	; 19
   3e98e:	09 f4       	brne	.+2      	; 0x3e992 <main+0x2b0>
   3e990:	c3 c1       	rjmp	.+902    	; 0x3ed18 <main+0x636>
   3e992:	b0 f5       	brcc	.+108    	; 0x3ea00 <main+0x31e>
   3e994:	46 30       	cpi	r20, 0x06	; 6
   3e996:	09 f4       	brne	.+2      	; 0x3e99a <main+0x2b8>
   3e998:	b0 c1       	rjmp	.+864    	; 0x3ecfa <main+0x618>
   3e99a:	38 f5       	brcc	.+78     	; 0x3e9ea <main+0x308>
   3e99c:	42 30       	cpi	r20, 0x02	; 2
   3e99e:	09 f4       	brne	.+2      	; 0x3e9a2 <main+0x2c0>
   3e9a0:	74 c0       	rjmp	.+232    	; 0x3ea8a <main+0x3a8>
   3e9a2:	43 30       	cpi	r20, 0x03	; 3
   3e9a4:	09 f4       	brne	.+2      	; 0x3e9a8 <main+0x2c6>
   3e9a6:	68 c1       	rjmp	.+720    	; 0x3ec78 <main+0x596>
   3e9a8:	41 30       	cpi	r20, 0x01	; 1
   3e9aa:	39 f5       	brne	.+78     	; 0x3e9fa <main+0x318>
					}
					break;
	#endif
				case CMD_SIGN_ON:
				{
					if(isAuthenticated){
   3e9ac:	cc 5d       	subi	r28, 0xDC	; 220
   3e9ae:	de 4f       	sbci	r29, 0xFE	; 254
   3e9b0:	f8 81       	ld	r31, Y
   3e9b2:	c4 52       	subi	r28, 0x24	; 36
   3e9b4:	d1 40       	sbci	r29, 0x01	; 1
   3e9b6:	ff 23       	and	r31, r31
   3e9b8:	09 f4       	brne	.+2      	; 0x3e9bc <main+0x2da>
   3e9ba:	58 c1       	rjmp	.+688    	; 0x3ec6c <main+0x58a>
					// sendchar(0x62);
					msgLength		=	11;
					msgBuffer[1] 	=	STATUS_CMD_OK;
   3e9bc:	1a 82       	std	Y+2, r1	; 0x02
					msgBuffer[2] 	=	8;
   3e9be:	88 e0       	ldi	r24, 0x08	; 8
   3e9c0:	8b 83       	std	Y+3, r24	; 0x03
					msgBuffer[3] 	=	'A';
   3e9c2:	81 e4       	ldi	r24, 0x41	; 65
   3e9c4:	8c 83       	std	Y+4, r24	; 0x04
					msgBuffer[4] 	=	'V';
   3e9c6:	86 e5       	ldi	r24, 0x56	; 86
   3e9c8:	8d 83       	std	Y+5, r24	; 0x05
					msgBuffer[5] 	=	'R';
   3e9ca:	82 e5       	ldi	r24, 0x52	; 82
   3e9cc:	8e 83       	std	Y+6, r24	; 0x06
					msgBuffer[6] 	=	'I';
   3e9ce:	89 e4       	ldi	r24, 0x49	; 73
   3e9d0:	8f 83       	std	Y+7, r24	; 0x07
					msgBuffer[7] 	=	'S';
   3e9d2:	83 e5       	ldi	r24, 0x53	; 83
   3e9d4:	88 87       	std	Y+8, r24	; 0x08
					msgBuffer[8] 	=	'P';
   3e9d6:	80 e5       	ldi	r24, 0x50	; 80
   3e9d8:	89 87       	std	Y+9, r24	; 0x09
					msgBuffer[9] 	=	'_';
   3e9da:	8f e5       	ldi	r24, 0x5F	; 95
   3e9dc:	8a 87       	std	Y+10, r24	; 0x0a
					msgBuffer[10]	=	'2';
   3e9de:	82 e3       	ldi	r24, 0x32	; 50
   3e9e0:	8b 87       	std	Y+11, r24	; 0x0b
   3e9e2:	a1 2c       	mov	r10, r1
					msgLength		=	11;
   3e9e4:	8b e0       	ldi	r24, 0x0B	; 11
   3e9e6:	90 e0       	ldi	r25, 0x00	; 0
   3e9e8:	9f c0       	rjmp	.+318    	; 0x3eb28 <main+0x446>
			switch (msgBuffer[0])
   3e9ea:	41 31       	cpi	r20, 0x11	; 17
   3e9ec:	09 f4       	brne	.+2      	; 0x3e9f0 <main+0x30e>
   3e9ee:	53 c1       	rjmp	.+678    	; 0x3ec96 <main+0x5b4>
   3e9f0:	08 f0       	brcs	.+2      	; 0x3e9f4 <main+0x312>
   3e9f2:	75 c1       	rjmp	.+746    	; 0x3ecde <main+0x5fc>
   3e9f4:	40 31       	cpi	r20, 0x10	; 16
   3e9f6:	09 f4       	brne	.+2      	; 0x3e9fa <main+0x318>
   3e9f8:	48 c0       	rjmp	.+144    	; 0x3ea8a <main+0x3a8>
					}
					break;

				default:
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_FAILED;
   3e9fa:	80 ec       	ldi	r24, 0xC0	; 192
   3e9fc:	8a 83       	std	Y+2, r24	; 0x02
   3e9fe:	8a c1       	rjmp	.+788    	; 0x3ed14 <main+0x632>
			switch (msgBuffer[0])
   3ea00:	48 31       	cpi	r20, 0x18	; 24
   3ea02:	09 f4       	brne	.+2      	; 0x3ea06 <main+0x324>
   3ea04:	57 c1       	rjmp	.+686    	; 0x3ecb4 <main+0x5d2>
   3ea06:	60 f5       	brcc	.+88     	; 0x3ea60 <main+0x37e>
   3ea08:	45 31       	cpi	r20, 0x15	; 21
   3ea0a:	09 f4       	brne	.+2      	; 0x3ea0e <main+0x32c>
   3ea0c:	85 c1       	rjmp	.+778    	; 0x3ed18 <main+0x636>
   3ea0e:	10 f0       	brcs	.+4      	; 0x3ea14 <main+0x332>
   3ea10:	46 31       	cpi	r20, 0x16	; 22
   3ea12:	99 f7       	brne	.-26     	; 0x3e9fa <main+0x318>
   3ea14:	2a 81       	ldd	r18, Y+2	; 0x02
   3ea16:	3b 81       	ldd	r19, Y+3	; 0x03
   3ea18:	32 27       	eor	r19, r18
   3ea1a:	23 27       	eor	r18, r19
   3ea1c:	32 27       	eor	r19, r18
						msgLength				=	size+3;
   3ea1e:	c9 01       	movw	r24, r18
   3ea20:	03 96       	adiw	r24, 0x03	; 3
						*p++	=	STATUS_CMD_OK;
   3ea22:	1a 82       	std	Y+2, r1	; 0x02
						if (msgBuffer[0] == CMD_READ_FLASH_ISP )
   3ea24:	44 31       	cpi	r20, 0x14	; 20
   3ea26:	09 f0       	breq	.+2      	; 0x3ea2a <main+0x348>
   3ea28:	0c c2       	rjmp	.+1048   	; 0x3ee42 <main+0x760>
   3ea2a:	d1 01       	movw	r26, r2
								data	=	pgm_read_word_far(address);
   3ea2c:	6b be       	out	0x3b, r6	; 59
   3ea2e:	f2 01       	movw	r30, r4
   3ea30:	47 91       	elpm	r20, Z+
   3ea32:	56 91       	elpm	r21, Z
								*p++	=	(unsigned char)data;		//LSB
   3ea34:	12 96       	adiw	r26, 0x02	; 2
   3ea36:	4c 93       	st	X, r20
   3ea38:	12 97       	sbiw	r26, 0x02	; 2
   3ea3a:	fd 01       	movw	r30, r26
   3ea3c:	34 96       	adiw	r30, 0x04	; 4
								*p++	=	(unsigned char)(data >> 8);	//MSB
   3ea3e:	13 96       	adiw	r26, 0x03	; 3
   3ea40:	5c 93       	st	X, r21
   3ea42:	13 97       	sbiw	r26, 0x03	; 3
								address	+=	2;							// Select next word in memory
   3ea44:	42 e0       	ldi	r20, 0x02	; 2
   3ea46:	44 0e       	add	r4, r20
   3ea48:	51 1c       	adc	r5, r1
   3ea4a:	61 1c       	adc	r6, r1
   3ea4c:	71 1c       	adc	r7, r1
								size	-=	2;
   3ea4e:	22 50       	subi	r18, 0x02	; 2
   3ea50:	31 09       	sbc	r19, r1
   3ea52:	12 96       	adiw	r26, 0x02	; 2
							}while (size);
   3ea54:	21 15       	cp	r18, r1
   3ea56:	31 05       	cpc	r19, r1
   3ea58:	49 f7       	brne	.-46     	; 0x3ea2c <main+0x34a>
						*p++	=	STATUS_CMD_OK;
   3ea5a:	10 82       	st	Z, r1
   3ea5c:	a1 2c       	mov	r10, r1
   3ea5e:	64 c0       	rjmp	.+200    	; 0x3eb28 <main+0x446>
			switch (msgBuffer[0])
   3ea60:	4b 31       	cpi	r20, 0x1B	; 27
   3ea62:	09 f4       	brne	.+2      	; 0x3ea66 <main+0x384>
   3ea64:	1b c1       	rjmp	.+566    	; 0x3ec9c <main+0x5ba>
   3ea66:	47 36       	cpi	r20, 0x67	; 103
   3ea68:	e9 f0       	breq	.+58     	; 0x3eaa4 <main+0x3c2>
   3ea6a:	4a 31       	cpi	r20, 0x1A	; 26
   3ea6c:	09 f0       	breq	.+2      	; 0x3ea70 <main+0x38e>
   3ea6e:	c5 cf       	rjmp	.-118    	; 0x3e9fa <main+0x318>
					msgBuffer[1]	=	STATUS_CMD_OK;
   3ea70:	1a 82       	std	Y+2, r1	; 0x02
					msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
   3ea72:	89 e0       	ldi	r24, 0x09	; 9
   3ea74:	e1 e0       	ldi	r30, 0x01	; 1
   3ea76:	f0 e0       	ldi	r31, 0x00	; 0
   3ea78:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3ea7c:	84 91       	lpm	r24, Z
   3ea7e:	8b 83       	std	Y+3, r24	; 0x03
					msgBuffer[3]	=	STATUS_CMD_OK;
   3ea80:	1c 82       	std	Y+4, r1	; 0x04
					break;
   3ea82:	a1 2c       	mov	r10, r1
					msgLength		=	4;
   3ea84:	84 e0       	ldi	r24, 0x04	; 4
   3ea86:	90 e0       	ldi	r25, 0x00	; 0
					break;
   3ea88:	4f c0       	rjmp	.+158    	; 0x3eb28 <main+0x446>
			switch (msgBuffer[0])
   3ea8a:	a1 2c       	mov	r10, r1
				if(isAuthenticated){
   3ea8c:	cc 5d       	subi	r28, 0xDC	; 220
   3ea8e:	de 4f       	sbci	r29, 0xFE	; 254
   3ea90:	28 81       	ld	r18, Y
   3ea92:	c4 52       	subi	r28, 0x24	; 36
   3ea94:	d1 40       	sbci	r29, 0x01	; 1
   3ea96:	22 23       	and	r18, r18
   3ea98:	09 f4       	brne	.+2      	; 0x3ea9c <main+0x3ba>
   3ea9a:	46 c0       	rjmp	.+140    	; 0x3eb28 <main+0x446>
					msgBuffer[1]	=	STATUS_CMD_OK;
   3ea9c:	1a 82       	std	Y+2, r1	; 0x02
					msgLength		=	2;
   3ea9e:	82 e0       	ldi	r24, 0x02	; 2
   3eaa0:	90 e0       	ldi	r25, 0x00	; 0
					break;
   3eaa2:	42 c0       	rjmp	.+132    	; 0x3eb28 <main+0x446>
					if((msgBuffer[5] == authenticationToken[0]) && (msgBuffer[6] == authenticationToken[1]) && (msgBuffer[7] == authenticationToken[2]) && (msgBuffer[8] == authenticationToken[3]))
   3eaa4:	9e 81       	ldd	r25, Y+6	; 0x06
   3eaa6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <authenticationToken>
   3eaaa:	98 13       	cpse	r25, r24
   3eaac:	d4 c0       	rjmp	.+424    	; 0x3ec56 <main+0x574>
   3eaae:	9f 81       	ldd	r25, Y+7	; 0x07
   3eab0:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <authenticationToken+0x1>
   3eab4:	98 13       	cpse	r25, r24
   3eab6:	cf c0       	rjmp	.+414    	; 0x3ec56 <main+0x574>
   3eab8:	98 85       	ldd	r25, Y+8	; 0x08
   3eaba:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <authenticationToken+0x2>
   3eabe:	98 13       	cpse	r25, r24
   3eac0:	ca c0       	rjmp	.+404    	; 0x3ec56 <main+0x574>
   3eac2:	99 85       	ldd	r25, Y+9	; 0x09
   3eac4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <authenticationToken+0x3>
   3eac8:	98 13       	cpse	r25, r24
   3eaca:	c5 c0       	rjmp	.+394    	; 0x3ec56 <main+0x574>
						authenticationNumber.authBytes[0] = msgBuffer[1];
   3eacc:	8a 81       	ldd	r24, Y+2	; 0x02
   3eace:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <authenticationNumber>
						authenticationNumber.authBytes[1] = msgBuffer[2];
   3ead2:	8b 81       	ldd	r24, Y+3	; 0x03
   3ead4:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <authenticationNumber+0x1>
						authenticationNumber.authBytes[2] = msgBuffer[3];
   3ead8:	8c 81       	ldd	r24, Y+4	; 0x04
   3eada:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <authenticationNumber+0x2>
						authenticationNumber.authBytes[3] = msgBuffer[4];
   3eade:	2d 81       	ldd	r18, Y+5	; 0x05
   3eae0:	20 93 21 08 	sts	0x0821, r18	; 0x800821 <authenticationNumber+0x3>
						authenticationNumber.authenticationNumber = authenticationNumber.authenticationNumber +  number;
   3eae4:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <authenticationNumber>
   3eae8:	90 91 1f 08 	lds	r25, 0x081F	; 0x80081f <authenticationNumber+0x1>
   3eaec:	a0 91 20 08 	lds	r26, 0x0820	; 0x800820 <authenticationNumber+0x2>
   3eaf0:	b0 91 21 08 	lds	r27, 0x0821	; 0x800821 <authenticationNumber+0x3>
   3eaf4:	82 0f       	add	r24, r18
   3eaf6:	91 1d       	adc	r25, r1
   3eaf8:	a1 1d       	adc	r26, r1
   3eafa:	b1 1d       	adc	r27, r1
   3eafc:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <authenticationNumber>
   3eb00:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <authenticationNumber+0x1>
   3eb04:	a0 93 20 08 	sts	0x0820, r26	; 0x800820 <authenticationNumber+0x2>
   3eb08:	b0 93 21 08 	sts	0x0821, r27	; 0x800821 <authenticationNumber+0x3>
						msgBuffer[0] = STATUS_CMD_OK;
   3eb0c:	19 82       	std	Y+1, r1	; 0x01
						msgBuffer[1] = authenticationNumber.authBytes[0];
   3eb0e:	8a 83       	std	Y+2, r24	; 0x02
						msgBuffer[2] = authenticationNumber.authBytes[1];
   3eb10:	9b 83       	std	Y+3, r25	; 0x03
						msgBuffer[3] = authenticationNumber.authBytes[2];
   3eb12:	ac 83       	std	Y+4, r26	; 0x04
						msgBuffer[4] = authenticationNumber.authBytes[3];
   3eb14:	bd 83       	std	Y+5, r27	; 0x05
					{
   3eb16:	a1 2c       	mov	r10, r1
						isAuthenticated = 0x01;
   3eb18:	e1 e0       	ldi	r30, 0x01	; 1
   3eb1a:	cc 5d       	subi	r28, 0xDC	; 220
   3eb1c:	de 4f       	sbci	r29, 0xFE	; 254
   3eb1e:	e8 83       	st	Y, r30
   3eb20:	c4 52       	subi	r28, 0x24	; 36
   3eb22:	d1 40       	sbci	r29, 0x01	; 1
						msgLength = 5;
   3eb24:	85 e0       	ldi	r24, 0x05	; 5
   3eb26:	90 e0       	ldi	r25, 0x00	; 0
			 // encryption kismi burada olmali

// aes_encrypt(receivedPacket, aes_buffer, packetSize);
			receivedPacketIndex = 0;

			receivedPacket[receivedPacketIndex++] = MESSAGE_START;
   3eb28:	2b e1       	ldi	r18, 0x1B	; 27
   3eb2a:	20 93 24 03 	sts	0x0324, r18	; 0x800324 <receivedPacket>

			checksum	=	MESSAGE_START^0;
			receivedPacket[receivedPacketIndex++] = seqNum;
   3eb2e:	cb 5d       	subi	r28, 0xDB	; 219
   3eb30:	de 4f       	sbci	r29, 0xFE	; 254
   3eb32:	a8 81       	ld	r26, Y
   3eb34:	c5 52       	subi	r28, 0x25	; 37
   3eb36:	d1 40       	sbci	r29, 0x01	; 1
   3eb38:	a0 93 25 03 	sts	0x0325, r26	; 0x800325 <receivedPacket+0x1>
			checksum	^=	seqNum;

			c			=	((msgLength>>8)&0xFF);
   3eb3c:	69 2f       	mov	r22, r25
			receivedPacket[receivedPacketIndex++] = c;
   3eb3e:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <receivedPacket+0x2>
			checksum	^=	c;

			c			=	msgLength&0x00FF;
			receivedPacket[receivedPacketIndex++] = c;
   3eb42:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <receivedPacket+0x3>
   3eb46:	55 e1       	ldi	r21, 0x15	; 21
   3eb48:	b5 2e       	mov	r11, r21
   3eb4a:	ba 26       	eor	r11, r26
   3eb4c:	b8 26       	eor	r11, r24
			checksum ^= c;
			residualNumber = (msgLength+6) % 16;
   3eb4e:	fc 01       	movw	r30, r24
   3eb50:	36 96       	adiw	r30, 0x06	; 6
   3eb52:	af 01       	movw	r20, r30
   3eb54:	4f 70       	andi	r20, 0x0F	; 15
   3eb56:	55 27       	eor	r21, r21

			finalResponseSize = ((msgLength+(16-residualNumber)+6));
   3eb58:	6c 01       	movw	r12, r24
   3eb5a:	b6 e1       	ldi	r27, 0x16	; 22
   3eb5c:	cb 0e       	add	r12, r27
   3eb5e:	d1 1c       	adc	r13, r1
   3eb60:	c4 1a       	sub	r12, r20
   3eb62:	d5 0a       	sbc	r13, r21

			if(residualNumber != 0)
   3eb64:	45 2b       	or	r20, r21
   3eb66:	09 f0       	breq	.+2      	; 0x3eb6a <main+0x488>
   3eb68:	98 c1       	rjmp	.+816    	; 0x3ee9a <main+0x7b8>
					receivedPacket[excessiveNumberIndex] = 0xff;
				}

			}

			receivedPacket[receivedPacketIndex++] = TOKEN;
   3eb6a:	2e e0       	ldi	r18, 0x0E	; 14
   3eb6c:	20 93 28 03 	sts	0x0328, r18	; 0x800328 <receivedPacket+0x4>
			checksum ^= TOKEN;
   3eb70:	b6 26       	eor	r11, r22
   3eb72:	fe 01       	movw	r30, r28
   3eb74:	31 96       	adiw	r30, 0x01	; 1
   3eb76:	a9 e2       	ldi	r26, 0x29	; 41
   3eb78:	b3 e0       	ldi	r27, 0x03	; 3
   3eb7a:	9c 01       	movw	r18, r24
   3eb7c:	2e 0f       	add	r18, r30
   3eb7e:	3f 1f       	adc	r19, r31
			p	=	msgBuffer;
			while ( msgLength )
   3eb80:	2e 17       	cp	r18, r30
   3eb82:	3f 07       	cpc	r19, r31
   3eb84:	09 f0       	breq	.+2      	; 0x3eb88 <main+0x4a6>
   3eb86:	95 c1       	rjmp	.+810    	; 0x3eeb2 <main+0x7d0>
				receivedPacket[receivedPacketIndex++] = c;
				checksum ^=c;
				msgLength--;
			}

			receivedPacket[receivedPacketIndex++] = checksum;
   3eb88:	8c 5d       	subi	r24, 0xDC	; 220
   3eb8a:	9c 4f       	sbci	r25, 0xFC	; 252
   3eb8c:	fc 01       	movw	r30, r24
   3eb8e:	b5 82       	std	Z+5, r11	; 0x05
			seqNum++;
   3eb90:	cb 5d       	subi	r28, 0xDB	; 219
   3eb92:	de 4f       	sbci	r29, 0xFE	; 254
   3eb94:	f8 81       	ld	r31, Y
   3eb96:	c5 52       	subi	r28, 0x25	; 37
   3eb98:	d1 40       	sbci	r29, 0x01	; 1
   3eb9a:	ff 5f       	subi	r31, 0xFF	; 255
   3eb9c:	cb 5d       	subi	r28, 0xDB	; 219
   3eb9e:	de 4f       	sbci	r29, 0xFE	; 254
   3eba0:	f8 83       	st	Y, r31
   3eba2:	c5 52       	subi	r28, 0x25	; 37
   3eba4:	d1 40       	sbci	r29, 0x01	; 1
  uint8_t extra = length % 16; /* Remaining bytes in the last non-full block */
   3eba6:	2c 2d       	mov	r18, r12
   3eba8:	2f 70       	andi	r18, 0x0F	; 15
   3ebaa:	c9 5d       	subi	r28, 0xD9	; 217
   3ebac:	de 4f       	sbci	r29, 0xFE	; 254
   3ebae:	28 83       	st	Y, r18
   3ebb0:	c7 52       	subi	r28, 0x27	; 39
   3ebb2:	d1 40       	sbci	r29, 0x01	; 1
    Key = key;
   3ebb4:	86 e4       	ldi	r24, 0x46	; 70
   3ebb6:	97 e0       	ldi	r25, 0x07	; 7
   3ebb8:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <Key+0x1>
   3ebbc:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <Key>
    KeyExpansion();
   3ebc0:	0f 94 af f0 	call	0x3e15e	; 0x3e15e <KeyExpansion>
    Iv = (uint8_t*)iv;
   3ebc4:	a6 e5       	ldi	r26, 0x56	; 86
   3ebc6:	b7 e0       	ldi	r27, 0x07	; 7
   3ebc8:	b0 93 69 07 	sts	0x0769, r27	; 0x800769 <Iv+0x1>
   3ebcc:	a0 93 68 07 	sts	0x0768, r26	; 0x800768 <Iv>
   3ebd0:	44 e2       	ldi	r20, 0x24	; 36
   3ebd2:	e4 2e       	mov	r14, r20
   3ebd4:	43 e0       	ldi	r20, 0x03	; 3
   3ebd6:	f4 2e       	mov	r15, r20
   3ebd8:	04 e0       	ldi	r16, 0x04	; 4
   3ebda:	12 e0       	ldi	r17, 0x02	; 2
  for (i = 0; i < length; i += 16)
   3ebdc:	c7 01       	movw	r24, r14
   3ebde:	84 52       	subi	r24, 0x24	; 36
   3ebe0:	93 40       	sbci	r25, 0x03	; 3
   3ebe2:	8c 15       	cp	r24, r12
   3ebe4:	9d 05       	cpc	r25, r13
   3ebe6:	08 f4       	brcc	.+2      	; 0x3ebea <main+0x508>
   3ebe8:	68 c1       	rjmp	.+720    	; 0x3eeba <main+0x7d8>
  if (extra)
   3ebea:	c9 5d       	subi	r28, 0xD9	; 217
   3ebec:	de 4f       	sbci	r29, 0xFE	; 254
   3ebee:	e8 81       	ld	r30, Y
   3ebf0:	c7 52       	subi	r28, 0x27	; 39
   3ebf2:	d1 40       	sbci	r29, 0x01	; 1
   3ebf4:	ee 23       	and	r30, r30
   3ebf6:	61 f0       	breq	.+24     	; 0x3ec10 <main+0x52e>
    memcpy(output, input, extra);
   3ebf8:	4e 2f       	mov	r20, r30
   3ebfa:	50 e0       	ldi	r21, 0x00	; 0
   3ebfc:	b7 01       	movw	r22, r14
   3ebfe:	c8 01       	movw	r24, r16
   3ec00:	0f 94 ac f7 	call	0x3ef58	; 0x3ef58 <memcpy>
    state = (state_t*)output;
   3ec04:	10 93 1d 08 	sts	0x081D, r17	; 0x80081d <state+0x1>
   3ec08:	00 93 1c 08 	sts	0x081C, r16	; 0x80081c <state>
    Cipher();
   3ec0c:	0f 94 f3 f1 	call	0x3e3e6	; 0x3e3e6 <Cipher>




			aes_encrypt(aes_buffer, receivedPacket, finalResponseSize);
			sendchar(0x58);
   3ec10:	88 e5       	ldi	r24, 0x58	; 88
   3ec12:	0f 94 01 f3 	call	0x3e602	; 0x3e602 <sendchar>
			sendchar((finalResponseSize>>8)&0xFF);
   3ec16:	8d 2d       	mov	r24, r13
   3ec18:	0f 94 01 f3 	call	0x3e602	; 0x3e602 <sendchar>
			sendchar(finalResponseSize&0x00FF);
   3ec1c:	8c 2d       	mov	r24, r12
   3ec1e:	0f 94 01 f3 	call	0x3e602	; 0x3e602 <sendchar>
			for(int i =0; i<finalResponseSize; i++)
   3ec22:	04 e0       	ldi	r16, 0x04	; 4
   3ec24:	12 e0       	ldi	r17, 0x02	; 2
   3ec26:	c8 01       	movw	r24, r16
   3ec28:	84 50       	subi	r24, 0x04	; 4
   3ec2a:	92 40       	sbci	r25, 0x02	; 2
   3ec2c:	8c 15       	cp	r24, r12
   3ec2e:	9d 05       	cpc	r25, r13
   3ec30:	08 f4       	brcc	.+2      	; 0x3ec34 <main+0x552>
   3ec32:	5d c1       	rjmp	.+698    	; 0x3eeee <main+0x80c>
		while (!isLeave)
   3ec34:	aa 20       	and	r10, r10
   3ec36:	09 f4       	brne	.+2      	; 0x3ec3a <main+0x558>
   3ec38:	b8 cd       	rjmp	.-1168   	; 0x3e7aa <main+0xc8>
//	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED OFf
	delay_ms(100);							// delay after exit
#endif


	asm volatile ("nop");			// wait until port has changed
   3ec3a:	00 00       	nop

	/*
	 * Now leave bootloader
	 */

	UART_STATUS_REG	&=	0xfd;
   3ec3c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3ec40:	8d 7f       	andi	r24, 0xFD	; 253
   3ec42:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	boot_rww_enable();				// enable application section
   3ec46:	81 e1       	ldi	r24, 0x11	; 17
   3ec48:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3ec4c:	e8 95       	spm


	asm volatile(
   3ec4e:	ee 27       	eor	r30, r30
   3ec50:	ff 27       	eor	r31, r31
   3ec52:	09 94       	ijmp
   3ec54:	ff cf       	rjmp	.-2      	; 0x3ec54 <main+0x572>
							msgBuffer[0] = STATUS_CMD_FAILED;
   3ec56:	80 ec       	ldi	r24, 0xC0	; 192
   3ec58:	89 83       	std	Y+1, r24	; 0x01
							msgLength = 1;
   3ec5a:	81 e0       	ldi	r24, 0x01	; 1
   3ec5c:	90 e0       	ldi	r25, 0x00	; 0
							msgBuffer[0] = STATUS_CMD_FAILED;
   3ec5e:	a1 2c       	mov	r10, r1
							isAuthenticated = 0x00;
   3ec60:	cc 5d       	subi	r28, 0xDC	; 220
   3ec62:	de 4f       	sbci	r29, 0xFE	; 254
   3ec64:	18 82       	st	Y, r1
   3ec66:	c4 52       	subi	r28, 0x24	; 36
   3ec68:	d1 40       	sbci	r29, 0x01	; 1
   3ec6a:	5e cf       	rjmp	.-324    	; 0x3eb28 <main+0x446>
					msgBuffer[1] 	=	STATUS_CMD_FAILED;
   3ec6c:	80 ec       	ldi	r24, 0xC0	; 192
   3ec6e:	8a 83       	std	Y+2, r24	; 0x02
   3ec70:	a1 2c       	mov	r10, r1
					msgLength		=	1;
   3ec72:	81 e0       	ldi	r24, 0x01	; 1
   3ec74:	90 e0       	ldi	r25, 0x00	; 0
   3ec76:	58 cf       	rjmp	.-336    	; 0x3eb28 <main+0x446>
   3ec78:	ea 81       	ldd	r30, Y+2	; 0x02
   3ec7a:	e0 59       	subi	r30, 0x90	; 144
						switch(msgBuffer[1])
   3ec7c:	80 e0       	ldi	r24, 0x00	; 0
   3ec7e:	e3 30       	cpi	r30, 0x03	; 3
   3ec80:	20 f4       	brcc	.+8      	; 0x3ec8a <main+0x5a8>
   3ec82:	f0 e0       	ldi	r31, 0x00	; 0
   3ec84:	ec 5b       	subi	r30, 0xBC	; 188
   3ec86:	fb 4f       	sbci	r31, 0xFB	; 251
   3ec88:	80 81       	ld	r24, Z
						msgBuffer[1]	=	STATUS_CMD_OK;
   3ec8a:	1a 82       	std	Y+2, r1	; 0x02
						msgBuffer[2]	=	value;
   3ec8c:	8b 83       	std	Y+3, r24	; 0x03
					break;
   3ec8e:	a1 2c       	mov	r10, r1
						msgLength		=	3;
   3ec90:	83 e0       	ldi	r24, 0x03	; 3
   3ec92:	90 e0       	ldi	r25, 0x00	; 0
					break;
   3ec94:	49 cf       	rjmp	.-366    	; 0x3eb28 <main+0x446>
					isLeave	=	1;
   3ec96:	aa 24       	eor	r10, r10
   3ec98:	a3 94       	inc	r10
   3ec9a:	f8 ce       	rjmp	.-528    	; 0x3ea8c <main+0x3aa>
						unsigned char signatureIndex	=	msgBuffer[4];
   3ec9c:	8d 81       	ldd	r24, Y+5	; 0x05
						if ( signatureIndex == 0 )
   3ec9e:	88 23       	and	r24, r24
   3eca0:	29 f0       	breq	.+10     	; 0x3ecac <main+0x5ca>
						else if ( signatureIndex == 1 )
   3eca2:	81 30       	cpi	r24, 0x01	; 1
   3eca4:	29 f4       	brne	.+10     	; 0x3ecb0 <main+0x5ce>
							signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
   3eca6:	88 e9       	ldi	r24, 0x98	; 152
						msgBuffer[1]	=	STATUS_CMD_OK;
   3eca8:	1a 82       	std	Y+2, r1	; 0x02
   3ecaa:	e9 ce       	rjmp	.-558    	; 0x3ea7e <main+0x39c>
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
   3ecac:	8e e1       	ldi	r24, 0x1E	; 30
   3ecae:	fc cf       	rjmp	.-8      	; 0x3eca8 <main+0x5c6>
							signature	=	SIGNATURE_BYTES & 0x000000FF;
   3ecb0:	81 e0       	ldi	r24, 0x01	; 1
   3ecb2:	fa cf       	rjmp	.-12     	; 0x3eca8 <main+0x5c6>
						if ( msgBuffer[2] == 0x50 )
   3ecb4:	8b 81       	ldd	r24, Y+3	; 0x03
   3ecb6:	80 35       	cpi	r24, 0x50	; 80
   3ecb8:	71 f4       	brne	.+28     	; 0x3ecd6 <main+0x5f4>
							if ( msgBuffer[3] == 0x08 )
   3ecba:	8c 81       	ldd	r24, Y+4	; 0x04
   3ecbc:	88 30       	cpi	r24, 0x08	; 8
   3ecbe:	39 f4       	brne	.+14     	; 0x3ecce <main+0x5ec>
								fuseBits	=	boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   3ecc0:	89 e0       	ldi	r24, 0x09	; 9
   3ecc2:	e2 e0       	ldi	r30, 0x02	; 2
   3ecc4:	f0 e0       	ldi	r31, 0x00	; 0
							fuseBits	=	boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
   3ecc6:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3ecca:	84 91       	lpm	r24, Z
   3eccc:	ed cf       	rjmp	.-38     	; 0x3eca8 <main+0x5c6>
								fuseBits	=	boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
   3ecce:	89 e0       	ldi	r24, 0x09	; 9
   3ecd0:	f0 e0       	ldi	r31, 0x00	; 0
   3ecd2:	e0 e0       	ldi	r30, 0x00	; 0
   3ecd4:	f8 cf       	rjmp	.-16     	; 0x3ecc6 <main+0x5e4>
							fuseBits	=	boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
   3ecd6:	89 e0       	ldi	r24, 0x09	; 9
   3ecd8:	e3 e0       	ldi	r30, 0x03	; 3
   3ecda:	f0 e0       	ldi	r31, 0x00	; 0
   3ecdc:	f4 cf       	rjmp	.-24     	; 0x3ecc6 <main+0x5e4>
					msgBuffer[1]	=	STATUS_CMD_FAILED;	//*	isue 543, return FAILED instead of OK
   3ecde:	80 ec       	ldi	r24, 0xC0	; 192
   3ece0:	8a 83       	std	Y+2, r24	; 0x02
					break;
   3ece2:	a1 2c       	mov	r10, r1
					msgLength		=	2;
   3ece4:	82 e0       	ldi	r24, 0x02	; 2
   3ece6:	90 e0       	ldi	r25, 0x00	; 0
					eraseAddress	=	0;
   3ece8:	c0 5e       	subi	r28, 0xE0	; 224
   3ecea:	de 4f       	sbci	r29, 0xFE	; 254
   3ecec:	18 82       	st	Y, r1
   3ecee:	19 82       	std	Y+1, r1	; 0x01
   3ecf0:	1a 82       	std	Y+2, r1	; 0x02
   3ecf2:	1b 82       	std	Y+3, r1	; 0x03
   3ecf4:	c0 52       	subi	r28, 0x20	; 32
   3ecf6:	d1 40       	sbci	r29, 0x01	; 1
					break;
   3ecf8:	17 cf       	rjmp	.-466    	; 0x3eb28 <main+0x446>
   3ecfa:	6a 81       	ldd	r22, Y+2	; 0x02
   3ecfc:	7b 81       	ldd	r23, Y+3	; 0x03
   3ecfe:	8c 81       	ldd	r24, Y+4	; 0x04
   3ed00:	9d 81       	ldd	r25, Y+5	; 0x05
   3ed02:	0f 94 91 f7 	call	0x3ef22	; 0x3ef22 <__bswapsi2>
					address	=	( ((address_t)(msgBuffer[1])<<24)|((address_t)(msgBuffer[2])<<16)|((address_t)(msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;
   3ed06:	2b 01       	movw	r4, r22
   3ed08:	3c 01       	movw	r6, r24
   3ed0a:	44 0c       	add	r4, r4
   3ed0c:	55 1c       	adc	r5, r5
   3ed0e:	66 1c       	adc	r6, r6
   3ed10:	77 1c       	adc	r7, r7
					msgBuffer[1]	=	STATUS_CMD_OK;
   3ed12:	1a 82       	std	Y+2, r1	; 0x02
					break;
   3ed14:	a1 2c       	mov	r10, r1
   3ed16:	c3 ce       	rjmp	.-634    	; 0x3ea9e <main+0x3bc>
						if(isAuthenticated){
   3ed18:	cc 5d       	subi	r28, 0xDC	; 220
   3ed1a:	de 4f       	sbci	r29, 0xFE	; 254
   3ed1c:	f8 81       	ld	r31, Y
   3ed1e:	c4 52       	subi	r28, 0x24	; 36
   3ed20:	d1 40       	sbci	r29, 0x01	; 1
   3ed22:	ff 23       	and	r31, r31
   3ed24:	09 f4       	brne	.+2      	; 0x3ed28 <main+0x646>
   3ed26:	9a ce       	rjmp	.-716    	; 0x3ea5c <main+0x37a>
   3ed28:	0a 81       	ldd	r16, Y+2	; 0x02
   3ed2a:	1b 81       	ldd	r17, Y+3	; 0x03
   3ed2c:	10 27       	eor	r17, r16
   3ed2e:	01 27       	eor	r16, r17
   3ed30:	10 27       	eor	r17, r16
	  					if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
   3ed32:	43 31       	cpi	r20, 0x13	; 19
   3ed34:	09 f0       	breq	.+2      	; 0x3ed38 <main+0x656>
   3ed36:	5d c0       	rjmp	.+186    	; 0x3edf2 <main+0x710>
							if (eraseAddress < APP_END )
   3ed38:	c0 5e       	subi	r28, 0xE0	; 224
   3ed3a:	de 4f       	sbci	r29, 0xFE	; 254
   3ed3c:	88 81       	ld	r24, Y
   3ed3e:	99 81       	ldd	r25, Y+1	; 0x01
   3ed40:	aa 81       	ldd	r26, Y+2	; 0x02
   3ed42:	bb 81       	ldd	r27, Y+3	; 0x03
   3ed44:	c0 52       	subi	r28, 0x20	; 32
   3ed46:	d1 40       	sbci	r29, 0x01	; 1
   3ed48:	81 15       	cp	r24, r1
   3ed4a:	e0 ec       	ldi	r30, 0xC0	; 192
   3ed4c:	9e 07       	cpc	r25, r30
   3ed4e:	e3 e0       	ldi	r30, 0x03	; 3
   3ed50:	ae 07       	cpc	r26, r30
   3ed52:	b1 05       	cpc	r27, r1
   3ed54:	e8 f4       	brcc	.+58     	; 0x3ed90 <main+0x6ae>
								boot_page_erase(eraseAddress);	// Perform page erase
   3ed56:	23 e0       	ldi	r18, 0x03	; 3
   3ed58:	fc 01       	movw	r30, r24
   3ed5a:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3ed5e:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3ed62:	e8 95       	spm
								boot_spm_busy_wait();		// Wait until the memory is erased.
   3ed64:	07 b6       	in	r0, 0x37	; 55
   3ed66:	00 fc       	sbrc	r0, 0
   3ed68:	fd cf       	rjmp	.-6      	; 0x3ed64 <main+0x682>
								eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
   3ed6a:	c0 5e       	subi	r28, 0xE0	; 224
   3ed6c:	de 4f       	sbci	r29, 0xFE	; 254
   3ed6e:	88 81       	ld	r24, Y
   3ed70:	99 81       	ldd	r25, Y+1	; 0x01
   3ed72:	aa 81       	ldd	r26, Y+2	; 0x02
   3ed74:	bb 81       	ldd	r27, Y+3	; 0x03
   3ed76:	c0 52       	subi	r28, 0x20	; 32
   3ed78:	d1 40       	sbci	r29, 0x01	; 1
   3ed7a:	9f 5f       	subi	r25, 0xFF	; 255
   3ed7c:	af 4f       	sbci	r26, 0xFF	; 255
   3ed7e:	bf 4f       	sbci	r27, 0xFF	; 255
   3ed80:	c0 5e       	subi	r28, 0xE0	; 224
   3ed82:	de 4f       	sbci	r29, 0xFE	; 254
   3ed84:	88 83       	st	Y, r24
   3ed86:	99 83       	std	Y+1, r25	; 0x01
   3ed88:	aa 83       	std	Y+2, r26	; 0x02
   3ed8a:	bb 83       	std	Y+3, r27	; 0x03
   3ed8c:	c0 52       	subi	r28, 0x20	; 32
   3ed8e:	d1 40       	sbci	r29, 0x01	; 1
   3ed90:	8b 85       	ldd	r24, Y+11	; 0x0b
   3ed92:	de 01       	movw	r26, r28
   3ed94:	11 96       	adiw	r26, 0x01	; 1
							signature	=	SIGNATURE_BYTES & 0x000000FF;
   3ed96:	b3 01       	movw	r22, r6
   3ed98:	a2 01       	movw	r20, r4
								data		=	(highByte << 8) | lowByte;
   3ed9a:	1b 96       	adiw	r26, 0x0b	; 11
   3ed9c:	9c 91       	ld	r25, X
   3ed9e:	1b 97       	sbiw	r26, 0x0b	; 11
								boot_page_fill(address,data);
   3eda0:	21 e0       	ldi	r18, 0x01	; 1
   3eda2:	0c 01       	movw	r0, r24
   3eda4:	fa 01       	movw	r30, r20
   3eda6:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3edaa:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3edae:	e8 95       	spm
   3edb0:	11 24       	eor	r1, r1
								address	=	address + 2;	// Select next word in memory
   3edb2:	4e 5f       	subi	r20, 0xFE	; 254
   3edb4:	5f 4f       	sbci	r21, 0xFF	; 255
   3edb6:	6f 4f       	sbci	r22, 0xFF	; 255
   3edb8:	7f 4f       	sbci	r23, 0xFF	; 255
								size	-=	2;				// Reduce number of bytes to write by two
   3edba:	02 50       	subi	r16, 0x02	; 2
   3edbc:	11 09       	sbc	r17, r1
   3edbe:	12 96       	adiw	r26, 0x02	; 2
							} while (size);					// Loop until all bytes written
   3edc0:	01 15       	cp	r16, r1
   3edc2:	11 05       	cpc	r17, r1
   3edc4:	21 f0       	breq	.+8      	; 0x3edce <main+0x6ec>
								highByte 	=	*p++;
   3edc6:	1a 96       	adiw	r26, 0x0a	; 10
   3edc8:	8c 91       	ld	r24, X
   3edca:	1a 97       	sbiw	r26, 0x0a	; 10
   3edcc:	e6 cf       	rjmp	.-52     	; 0x3ed9a <main+0x6b8>
							boot_page_write(tempaddress);
   3edce:	85 e0       	ldi	r24, 0x05	; 5
   3edd0:	f2 01       	movw	r30, r4
   3edd2:	60 92 5b 00 	sts	0x005B, r6	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3edd6:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3edda:	e8 95       	spm
							boot_spm_busy_wait();
   3eddc:	07 b6       	in	r0, 0x37	; 55
   3edde:	00 fc       	sbrc	r0, 0
   3ede0:	fd cf       	rjmp	.-6      	; 0x3eddc <main+0x6fa>
							boot_rww_enable();				// Re-enable the RWW section
   3ede2:	81 e1       	ldi	r24, 0x11	; 17
   3ede4:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3ede8:	e8 95       	spm
						msgBuffer[1]	=	STATUS_CMD_OK;
   3edea:	1a 82       	std	Y+2, r1	; 0x02
   3edec:	2a 01       	movw	r4, r20
   3edee:	3b 01       	movw	r6, r22
   3edf0:	91 cf       	rjmp	.-222    	; 0x3ed14 <main+0x632>
							uint16_t ii = address >> 1;
   3edf2:	73 01       	movw	r14, r6
   3edf4:	62 01       	movw	r12, r4
   3edf6:	f6 94       	lsr	r15
   3edf8:	e7 94       	ror	r14
   3edfa:	d7 94       	ror	r13
   3edfc:	c7 94       	ror	r12
   3edfe:	51 01       	movw	r10, r2
   3ee00:	a0 0e       	add	r10, r16
   3ee02:	b1 1e       	adc	r11, r17
							while (size) {
   3ee04:	71 01       	movw	r14, r2
								eeprom_write_byte((uint8_t*)ii, *p++);
   3ee06:	c2 18       	sub	r12, r2
   3ee08:	d3 08       	sbc	r13, r3
							while (size) {
   3ee0a:	ae 14       	cp	r10, r14
   3ee0c:	bf 04       	cpc	r11, r15
   3ee0e:	69 f4       	brne	.+26     	; 0x3ee2a <main+0x748>
   3ee10:	30 e0       	ldi	r19, 0x00	; 0
   3ee12:	20 e0       	ldi	r18, 0x00	; 0
   3ee14:	00 0f       	add	r16, r16
   3ee16:	11 1f       	adc	r17, r17
   3ee18:	22 1f       	adc	r18, r18
   3ee1a:	33 1f       	adc	r19, r19
   3ee1c:	b9 01       	movw	r22, r18
   3ee1e:	a8 01       	movw	r20, r16
   3ee20:	44 0d       	add	r20, r4
   3ee22:	55 1d       	adc	r21, r5
   3ee24:	66 1d       	adc	r22, r6
   3ee26:	77 1d       	adc	r23, r7
   3ee28:	e0 cf       	rjmp	.-64     	; 0x3edea <main+0x708>
								eeprom_write_byte((uint8_t*)ii, *p++);
   3ee2a:	d7 01       	movw	r26, r14
   3ee2c:	1a 96       	adiw	r26, 0x0a	; 10
   3ee2e:	6c 91       	ld	r22, X
   3ee30:	c6 01       	movw	r24, r12
   3ee32:	8e 0d       	add	r24, r14
   3ee34:	9f 1d       	adc	r25, r15
   3ee36:	0f 94 b5 f7 	call	0x3ef6a	; 0x3ef6a <eeprom_write_byte>
   3ee3a:	bf ef       	ldi	r27, 0xFF	; 255
   3ee3c:	eb 1a       	sub	r14, r27
   3ee3e:	fb 0a       	sbc	r15, r27
   3ee40:	e4 cf       	rjmp	.-56     	; 0x3ee0a <main+0x728>
   3ee42:	f1 01       	movw	r30, r2
   3ee44:	d1 01       	movw	r26, r2
   3ee46:	a2 0f       	add	r26, r18
   3ee48:	b3 1f       	adc	r27, r19
						if (msgBuffer[0] == CMD_READ_FLASH_ISP )
   3ee4a:	73 01       	movw	r14, r6
   3ee4c:	62 01       	movw	r12, r4
								EEARL	=	address;			// Setup EEPROM address
   3ee4e:	c1 bc       	out	0x21, r12	; 33
								EEARH	=	((address >> 8));
   3ee50:	77 27       	eor	r23, r23
   3ee52:	6f 2d       	mov	r22, r15
   3ee54:	5e 2d       	mov	r21, r14
   3ee56:	4d 2d       	mov	r20, r13
   3ee58:	42 bd       	out	0x22, r20	; 34
								address++;					// Select next EEPROM byte
   3ee5a:	4f ef       	ldi	r20, 0xFF	; 255
   3ee5c:	c4 1a       	sub	r12, r20
   3ee5e:	d4 0a       	sbc	r13, r20
   3ee60:	e4 0a       	sbc	r14, r20
   3ee62:	f4 0a       	sbc	r15, r20
								EECR	|=	(1<<EERE);			// Read EEPROM
   3ee64:	f8 9a       	sbi	0x1f, 0	; 31
								*p++	=	EEDR;				// Send EEPROM data
   3ee66:	60 b5       	in	r22, 0x20	; 32
   3ee68:	62 83       	std	Z+2, r22	; 0x02
   3ee6a:	31 96       	adiw	r30, 0x01	; 1
							} while (size);
   3ee6c:	ea 17       	cp	r30, r26
   3ee6e:	fb 07       	cpc	r31, r27
   3ee70:	71 f7       	brne	.-36     	; 0x3ee4e <main+0x76c>
   3ee72:	a9 01       	movw	r20, r18
   3ee74:	41 50       	subi	r20, 0x01	; 1
   3ee76:	51 09       	sbc	r21, r1
   3ee78:	70 e0       	ldi	r23, 0x00	; 0
   3ee7a:	60 e0       	ldi	r22, 0x00	; 0
   3ee7c:	4f 5f       	subi	r20, 0xFF	; 255
   3ee7e:	5f 4f       	sbci	r21, 0xFF	; 255
   3ee80:	6f 4f       	sbci	r22, 0xFF	; 255
   3ee82:	7f 4f       	sbci	r23, 0xFF	; 255
   3ee84:	44 0e       	add	r4, r20
   3ee86:	55 1e       	adc	r5, r21
   3ee88:	66 1e       	adc	r6, r22
   3ee8a:	77 1e       	adc	r7, r23
   3ee8c:	e3 e0       	ldi	r30, 0x03	; 3
   3ee8e:	f0 e0       	ldi	r31, 0x00	; 0
   3ee90:	ec 0f       	add	r30, r28
   3ee92:	fd 1f       	adc	r31, r29
   3ee94:	e2 0f       	add	r30, r18
   3ee96:	f3 1f       	adc	r31, r19
   3ee98:	e0 cd       	rjmp	.-1088   	; 0x3ea5a <main+0x378>
   3ee9a:	ec 5d       	subi	r30, 0xDC	; 220
   3ee9c:	fc 4f       	sbci	r31, 0xFC	; 252
					receivedPacket[excessiveNumberIndex] = 0xff;
   3ee9e:	4f ef       	ldi	r20, 0xFF	; 255
				for(int excessiveNumberIndex = (msgLength+6); excessiveNumberIndex<finalResponseSize; excessiveNumberIndex++)
   3eea0:	9f 01       	movw	r18, r30
   3eea2:	24 52       	subi	r18, 0x24	; 36
   3eea4:	33 40       	sbci	r19, 0x03	; 3
   3eea6:	2c 15       	cp	r18, r12
   3eea8:	3d 05       	cpc	r19, r13
   3eeaa:	08 f0       	brcs	.+2      	; 0x3eeae <main+0x7cc>
   3eeac:	5e ce       	rjmp	.-836    	; 0x3eb6a <main+0x488>
					receivedPacket[excessiveNumberIndex] = 0xff;
   3eeae:	41 93       	st	Z+, r20
   3eeb0:	f7 cf       	rjmp	.-18     	; 0x3eea0 <main+0x7be>
				c	=	*p++;
   3eeb2:	41 91       	ld	r20, Z+
				receivedPacket[receivedPacketIndex++] = c;
   3eeb4:	4d 93       	st	X+, r20
				checksum ^=c;
   3eeb6:	b4 26       	eor	r11, r20
   3eeb8:	63 ce       	rjmp	.-826    	; 0x3eb80 <main+0x49e>
    XorWithIv(input);
   3eeba:	c7 01       	movw	r24, r14
   3eebc:	0f 94 9d f0 	call	0x3e13a	; 0x3e13a <XorWithIv>
    memcpy(output, input, 16);
   3eec0:	80 e1       	ldi	r24, 0x10	; 16
   3eec2:	f7 01       	movw	r30, r14
   3eec4:	d8 01       	movw	r26, r16
   3eec6:	01 90       	ld	r0, Z+
   3eec8:	0d 92       	st	X+, r0
   3eeca:	8a 95       	dec	r24
   3eecc:	e1 f7       	brne	.-8      	; 0x3eec6 <main+0x7e4>
    state = (state_t*)output;
   3eece:	10 93 1d 08 	sts	0x081D, r17	; 0x80081d <state+0x1>
   3eed2:	00 93 1c 08 	sts	0x081C, r16	; 0x80081c <state>
    Cipher();
   3eed6:	0f 94 f3 f1 	call	0x3e3e6	; 0x3e3e6 <Cipher>
    Iv = output;
   3eeda:	10 93 69 07 	sts	0x0769, r17	; 0x800769 <Iv+0x1>
   3eede:	00 93 68 07 	sts	0x0768, r16	; 0x800768 <Iv>
    input += 16;
   3eee2:	b0 e1       	ldi	r27, 0x10	; 16
   3eee4:	eb 0e       	add	r14, r27
   3eee6:	f1 1c       	adc	r15, r1
    output += 16;
   3eee8:	00 5f       	subi	r16, 0xF0	; 240
   3eeea:	1f 4f       	sbci	r17, 0xFF	; 255
   3eeec:	77 ce       	rjmp	.-786    	; 0x3ebdc <main+0x4fa>
			sendchar(aes_buffer[i]);
   3eeee:	d8 01       	movw	r26, r16
   3eef0:	8d 91       	ld	r24, X+
   3eef2:	8d 01       	movw	r16, r26
   3eef4:	0f 94 01 f3 	call	0x3e602	; 0x3e602 <sendchar>
   3eef8:	96 ce       	rjmp	.-724    	; 0x3ec26 <main+0x544>

0003eefa <__divmodhi4>:
   3eefa:	97 fb       	bst	r25, 7
   3eefc:	07 2e       	mov	r0, r23
   3eefe:	16 f4       	brtc	.+4      	; 0x3ef04 <__divmodhi4+0xa>
   3ef00:	00 94       	com	r0
   3ef02:	07 d0       	rcall	.+14     	; 0x3ef12 <__divmodhi4_neg1>
   3ef04:	77 fd       	sbrc	r23, 7
   3ef06:	09 d0       	rcall	.+18     	; 0x3ef1a <__divmodhi4_neg2>
   3ef08:	0f 94 98 f7 	call	0x3ef30	; 0x3ef30 <__udivmodhi4>
   3ef0c:	07 fc       	sbrc	r0, 7
   3ef0e:	05 d0       	rcall	.+10     	; 0x3ef1a <__divmodhi4_neg2>
   3ef10:	3e f4       	brtc	.+14     	; 0x3ef20 <__divmodhi4_exit>

0003ef12 <__divmodhi4_neg1>:
   3ef12:	90 95       	com	r25
   3ef14:	81 95       	neg	r24
   3ef16:	9f 4f       	sbci	r25, 0xFF	; 255
   3ef18:	08 95       	ret

0003ef1a <__divmodhi4_neg2>:
   3ef1a:	70 95       	com	r23
   3ef1c:	61 95       	neg	r22
   3ef1e:	7f 4f       	sbci	r23, 0xFF	; 255

0003ef20 <__divmodhi4_exit>:
   3ef20:	08 95       	ret

0003ef22 <__bswapsi2>:
   3ef22:	69 27       	eor	r22, r25
   3ef24:	96 27       	eor	r25, r22
   3ef26:	69 27       	eor	r22, r25
   3ef28:	78 27       	eor	r23, r24
   3ef2a:	87 27       	eor	r24, r23
   3ef2c:	78 27       	eor	r23, r24
   3ef2e:	08 95       	ret

0003ef30 <__udivmodhi4>:
   3ef30:	aa 1b       	sub	r26, r26
   3ef32:	bb 1b       	sub	r27, r27
   3ef34:	51 e1       	ldi	r21, 0x11	; 17
   3ef36:	07 c0       	rjmp	.+14     	; 0x3ef46 <__udivmodhi4_ep>

0003ef38 <__udivmodhi4_loop>:
   3ef38:	aa 1f       	adc	r26, r26
   3ef3a:	bb 1f       	adc	r27, r27
   3ef3c:	a6 17       	cp	r26, r22
   3ef3e:	b7 07       	cpc	r27, r23
   3ef40:	10 f0       	brcs	.+4      	; 0x3ef46 <__udivmodhi4_ep>
   3ef42:	a6 1b       	sub	r26, r22
   3ef44:	b7 0b       	sbc	r27, r23

0003ef46 <__udivmodhi4_ep>:
   3ef46:	88 1f       	adc	r24, r24
   3ef48:	99 1f       	adc	r25, r25
   3ef4a:	5a 95       	dec	r21
   3ef4c:	a9 f7       	brne	.-22     	; 0x3ef38 <__udivmodhi4_loop>
   3ef4e:	80 95       	com	r24
   3ef50:	90 95       	com	r25
   3ef52:	bc 01       	movw	r22, r24
   3ef54:	cd 01       	movw	r24, r26
   3ef56:	08 95       	ret

0003ef58 <memcpy>:
   3ef58:	fb 01       	movw	r30, r22
   3ef5a:	dc 01       	movw	r26, r24
   3ef5c:	02 c0       	rjmp	.+4      	; 0x3ef62 <memcpy+0xa>
   3ef5e:	01 90       	ld	r0, Z+
   3ef60:	0d 92       	st	X+, r0
   3ef62:	41 50       	subi	r20, 0x01	; 1
   3ef64:	50 40       	sbci	r21, 0x00	; 0
   3ef66:	d8 f7       	brcc	.-10     	; 0x3ef5e <memcpy+0x6>
   3ef68:	08 95       	ret

0003ef6a <eeprom_write_byte>:
   3ef6a:	26 2f       	mov	r18, r22

0003ef6c <eeprom_write_r18>:
   3ef6c:	f9 99       	sbic	0x1f, 1	; 31
   3ef6e:	fe cf       	rjmp	.-4      	; 0x3ef6c <eeprom_write_r18>
   3ef70:	1f ba       	out	0x1f, r1	; 31
   3ef72:	92 bd       	out	0x22, r25	; 34
   3ef74:	81 bd       	out	0x21, r24	; 33
   3ef76:	20 bd       	out	0x20, r18	; 32
   3ef78:	0f b6       	in	r0, 0x3f	; 63
   3ef7a:	f8 94       	cli
   3ef7c:	fa 9a       	sbi	0x1f, 2	; 31
   3ef7e:	f9 9a       	sbi	0x1f, 1	; 31
   3ef80:	0f be       	out	0x3f, r0	; 63
   3ef82:	01 96       	adiw	r24, 0x01	; 1
   3ef84:	08 95       	ret

0003ef86 <_exit>:
   3ef86:	f8 94       	cli

0003ef88 <__stop_program>:
   3ef88:	ff cf       	rjmp	.-2      	; 0x3ef88 <__stop_program>
